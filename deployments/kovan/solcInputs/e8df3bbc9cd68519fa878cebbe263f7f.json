{
  "language": "Solidity",
  "sources": {
    "contracts/option/applications/factories/OptionFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\n/**\r\n * @title Factory for deploying option contracts.\r\n * @author Primitive\r\n */\r\n\r\nimport { Option, SafeMath } from \"../../primitives/Option.sol\";\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { OptionTemplateLib } from \"../../libraries/OptionTemplateLib.sol\";\r\nimport { NullCloneConstructor } from \"../NullCloneConstructor.sol\";\r\nimport { CloneLib } from \"../../libraries/CloneLib.sol\";\r\nimport { IOptionFactory } from \"../../interfaces/IOptionFactory.sol\";\r\n\r\ncontract OptionFactory is IOptionFactory, Ownable, NullCloneConstructor {\r\n    using SafeMath for uint256;\r\n\r\n    address public override optionTemplate;\r\n\r\n    constructor(address registry) public {\r\n        transferOwnership(registry);\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys the bytecode for the Option contract.\r\n     */\r\n    function deployOptionTemplate() public override {\r\n        optionTemplate = OptionTemplateLib.deployTemplate();\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys a create2 clone of the option template contract.\r\n     * @param underlyingToken The address of the underlying ERC-20 token.\r\n     * @param strikeToken The address of the strike ERC-20 token.\r\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\r\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\r\n     * @param expiry The unix timestamp for option expiry.\r\n     */\r\n    function deployClone(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external override onlyOwner returns (address) {\r\n        require(optionTemplate != address(0x0), \"ERR_NO_DEPLOYED_TEMPLATE\");\r\n\r\n        // Calculates the salt for create2.\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(\r\n                OptionTemplateLib.OPTION_SALT(),\r\n                underlyingToken,\r\n                strikeToken,\r\n                base,\r\n                quote,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        // Deploys the clone using the template contract and calculated salt.\r\n        address optionAddress = CloneLib.create2Clone(\r\n            optionTemplate,\r\n            uint256(salt)\r\n        );\r\n\r\n        // Sets the initial state of the option with the parameter arguments.\r\n        Option(optionAddress).initialize(\r\n            underlyingToken,\r\n            strikeToken,\r\n            base,\r\n            quote,\r\n            expiry\r\n        );\r\n\r\n        return optionAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Only the factory can call the initRedeemToken function to set the redeem token address.\r\n     * This function is only callable by the Registry contract (the owner).\r\n     */\r\n    function initRedeemToken(address optionAddress, address redeemAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        Option(optionAddress).initRedeemToken(redeemAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the option token's address using the five option parameters.\r\n     * @return The address of the option with the parameter arguments.\r\n     */\r\n    function calculateOptionAddress(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external override view returns (address) {\r\n        // Calculates the salt using the parameter arguments and the salt used in the template contract\r\n        // create2 deployment.\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(\r\n                OptionTemplateLib.OPTION_SALT(),\r\n                underlyingToken,\r\n                strikeToken,\r\n                base,\r\n                quote,\r\n                expiry\r\n            )\r\n        );\r\n        address optionAddress = CloneLib.deriveInstanceAddress(\r\n            optionTemplate,\r\n            salt\r\n        );\r\n        return optionAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/option/primitives/Option.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\n/**\r\n * @title   Vanilla Option Token\r\n * @notice  This is a low-level contract that is designed to be interacted with by\r\n *          other sophisticated smart contracts which have important safety checks,\r\n *          and not by externally owned accounts.\r\n *          Incorrect usage through direct interaction from externally owned accounts\r\n *          can lead to the loss of funds.\r\n *          Use Primitive's Trader.sol contract to interact with this contract safely.\r\n * @author  Primitive\r\n */\r\n\r\nimport { IOption } from \"../interfaces/IOption.sol\";\r\nimport { IRedeem } from \"../interfaces/IRedeem.sol\";\r\nimport { IFlash } from \"../interfaces/IFlash.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport { ERC20 } from \"./ERC20.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\ncontract Option is IOption, ERC20 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct OptionParameters {\r\n        address underlyingToken;\r\n        address strikeToken;\r\n        uint256 base;\r\n        uint256 quote;\r\n        uint256 expiry;\r\n    }\r\n\r\n    OptionParameters public optionParameters;\r\n\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint256 public override underlyingCache;\r\n    uint256 public override strikeCache;\r\n    address public override redeemToken;\r\n    address public override factory;\r\n    bool private _notEntered;\r\n\r\n    string public constant name = \"Primitive V1 Option\";\r\n    string public constant symbol = \"PRM\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Mint(address indexed from, uint256 outOptions, uint256 outRedeems);\r\n    event Exercise(\r\n        address indexed from,\r\n        uint256 outUnderlyings,\r\n        uint256 inStrikes\r\n    );\r\n    event Redeem(address indexed from, uint256 inRedeems);\r\n    event Close(address indexed from, uint256 outUnderlyings);\r\n    event UpdatedCacheBalances(uint256 underlyingCache, uint256 strikeCache);\r\n    event InitializedRedeem(\r\n        address indexed caller,\r\n        address indexed redeemToken\r\n    );\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @dev Sets the intial state for the contract. Only called immediately after deployment.\r\n     * @param underlyingToken The address of the underlying asset.\r\n     * @param strikeToken The address of the strike asset.\r\n     * @param base The quantity of underlying tokens per quote amount of strike tokens.\r\n     * @param quote The quantity of strike tokens per base amount of underlying tokens.\r\n     * @param expiry The expiration date for the option.\r\n     */\r\n    function initialize(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) public {\r\n        require(factory == address(0x0), \"ERR_IS_INITIALIZED\");\r\n        require(underlyingToken != strikeToken, \"ERR_SAME_ASSETS\");\r\n        require(base > 0, \"ERR_BASE_ZERO\");\r\n        require(quote > 0, \"ERR_QUOTE_ZERO\");\r\n        require(expiry >= block.timestamp, \"ERR_EXPIRY\");\r\n        factory = msg.sender;\r\n        optionParameters = OptionParameters(\r\n            underlyingToken,\r\n            strikeToken,\r\n            base,\r\n            quote,\r\n            expiry\r\n        );\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier notExpired {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(isNotExpired(), \"ERR_EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Called after the option contract is initialized, and a redeem token has been deployed.\r\n     * @notice Entangles a redeem token to this option contract permanently.\r\n     * @param redeemToken_ The address of the redeem token.\r\n     */\r\n    function initRedeemToken(address redeemToken_) external override {\r\n        require(msg.sender == factory, \"ERR_NOT_OWNER\");\r\n        require(redeemToken == address(0x0), \"ERR_REDEEM_INITIALIZED\");\r\n        redeemToken = redeemToken_;\r\n        emit InitializedRedeem(msg.sender, redeemToken_);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the cached balances to match the actual current balances.\r\n     * Attempting to transfer tokens to this contract directly, in a separate transaction,\r\n     * is incorrect and could result in loss of funds. Calling this function will permanently lock any excess\r\n     * underlying or strike tokens which were erroneously sent to this contract.\r\n     */\r\n    function updateCacheBalances() external override nonReentrant {\r\n        _updateCacheBalances(\r\n            IERC20(optionParameters.underlyingToken).balanceOf(address(this)),\r\n            IERC20(optionParameters.strikeToken).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the cache balances to new values.\r\n     */\r\n    function _updateCacheBalances(\r\n        uint256 underlyingBalance,\r\n        uint256 strikeBalance\r\n    ) private {\r\n        underlyingCache = underlyingBalance;\r\n        strikeCache = strikeBalance;\r\n        emit UpdatedCacheBalances(underlyingBalance, strikeBalance);\r\n    }\r\n\r\n    /* === STATE MUTABLE === */\r\n\r\n    /**\r\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\r\n     * This function should never be called directly by an externally owned account.\r\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\r\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\r\n     * into this contract, and this function is called, it can result in the loss of funds.\r\n     * Mints optionTokens at a 1:1 ratio to underlyingToken deposits. Also mints Redeem tokens at a base:quote ratio.\r\n     * @notice inUnderlyings = outOptionTokens. inUnderlying / strike ratio = outRedeemTokens.\r\n     * @param receiver The newly minted tokens are sent to the receiver address.\r\n     */\r\n    function mintOptions(address receiver)\r\n        external\r\n        override\r\n        nonReentrant\r\n        notExpired\r\n        returns (uint256, uint256)\r\n    {\r\n        // Save on gas because this variable is used twice.\r\n        uint256 underlyingBalance = IERC20(optionParameters.underlyingToken)\r\n            .balanceOf(address(this));\r\n\r\n        // Mint optionTokens equal to the difference between current and cached balance of underlyingTokens.\r\n        uint256 inUnderlyings = underlyingBalance.sub(underlyingCache);\r\n\r\n        // Calculate the quantity of redeemTokens to mint.\r\n        uint256 outRedeems = inUnderlyings.mul(optionParameters.quote).div(\r\n            optionParameters.base\r\n        );\r\n        require(outRedeems > 0, \"ERR_ZERO\");\r\n\r\n        // Mint the optionTokens and redeemTokens.\r\n        IRedeem(redeemToken).mint(receiver, outRedeems);\r\n        _mint(receiver, inUnderlyings);\r\n\r\n        // Update the underlyingCache.\r\n        _updateCacheBalances(underlyingBalance, strikeCache);\r\n        emit Mint(msg.sender, inUnderlyings, outRedeems);\r\n        return (inUnderlyings, outRedeems);\r\n    }\r\n\r\n    /**\r\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\r\n     * This function should never be called directly by an externally owned account.\r\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\r\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\r\n     * into this contract, and this function is called, it can result in the loss of funds.\r\n     * Sends out underlyingTokens then checks to make sure they are returned or paid for.\r\n     * This function enables flash exercises and flash loans. Only smart contracts who implement\r\n     * their own IFlash interface should be calling this function to initiate a flash exercise/loan.\r\n     * @notice If the underlyingTokens are returned, only the fee has to be paid.\r\n     * @param receiver The outUnderlyings are sent to the receiver address.\r\n     * @param outUnderlyings Quantity of underlyingTokens to safeTransfer to receiver optimistically.\r\n     * @param data Passing in any abritrary data will trigger the flash exercise callback function.\r\n     */\r\n    function exerciseOptions(\r\n        address receiver,\r\n        uint256 outUnderlyings,\r\n        bytes calldata data\r\n    ) external override nonReentrant notExpired returns (uint256, uint256) {\r\n        // Store the cached balances and token addresses in memory.\r\n        address underlyingToken = optionParameters.underlyingToken;\r\n        //(uint256 _underlyingCache, uint256 _strikeCache) = getCacheBalances();\r\n\r\n        // Require outUnderlyings > 0 and balance of underlyings >= outUnderlyings.\r\n        require(outUnderlyings > 0, \"ERR_ZERO\");\r\n        require(\r\n            IERC20(underlyingToken).balanceOf(address(this)) >= outUnderlyings,\r\n            \"ERR_BAL_UNDERLYING\"\r\n        );\r\n\r\n        // Optimistically safeTransfer out underlyingTokens.\r\n        IERC20(underlyingToken).safeTransfer(receiver, outUnderlyings);\r\n        if (data.length > 0)\r\n            IFlash(receiver).primitiveFlash(msg.sender, outUnderlyings, data);\r\n\r\n        // Store in memory for gas savings.\r\n        uint256 strikeBalance = IERC20(optionParameters.strikeToken).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        // Calculate the differences.\r\n        uint256 inStrikes = strikeBalance.sub(strikeCache);\r\n        uint256 inUnderlyings = underlyingBalance.sub(\r\n            underlyingCache.sub(outUnderlyings)\r\n        ); // will be > 0 if underlyingTokens are returned.\r\n\r\n        // Either underlyingTokens or strikeTokens must be sent into the contract.\r\n        require(inStrikes > 0 || inUnderlyings > 0, \"ERR_ZERO\");\r\n\r\n        // Calculate the remaining amount of underlyingToken that needs to be paid for.\r\n        uint256 remainder = inUnderlyings > outUnderlyings\r\n            ? 0\r\n            : outUnderlyings.sub(inUnderlyings);\r\n\r\n        // Calculate the expected payment of strikeTokens.\r\n        uint256 payment = remainder.mul(optionParameters.quote).div(\r\n            optionParameters.base\r\n        );\r\n\r\n        // Assumes the cached optionToken balance is 0, which is what it should be.\r\n        uint256 inOptions = balanceOf(address(this));\r\n\r\n        // Enforce the invariants.\r\n        require(inStrikes >= payment, \"ERR_STRIKES_INPUT\");\r\n        require(inOptions >= remainder, \"ERR_OPTIONS_INPUT\");\r\n\r\n        // Burn the optionTokens at a 1:1 ratio to outUnderlyings.\r\n        _burn(address(this), inOptions);\r\n\r\n        // Update the cached balances.\r\n        _updateCacheBalances(underlyingBalance, strikeBalance);\r\n        emit Exercise(msg.sender, outUnderlyings, inStrikes);\r\n        return (inStrikes, inOptions);\r\n    }\r\n\r\n    /**\r\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\r\n     * This function should never be called directly by an externally owned account.\r\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\r\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\r\n     * into this contract, and this function is called, it can result in the loss of funds.\r\n     * Burns redeemTokens to withdraw strikeTokens at a ratio of 1:1.\r\n     * @notice inRedeemTokens = outStrikeTokens. Only callable when strikeTokens are in the contract.\r\n     * @param receiver The inRedeems quantity of strikeTokens are sent to the receiver address.\r\n     */\r\n    function redeemStrikeTokens(address receiver)\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        address strikeToken = optionParameters.strikeToken;\r\n        address _redeemToken = redeemToken;\r\n        uint256 strikeBalance = IERC20(strikeToken).balanceOf(address(this));\r\n        uint256 inRedeems = IERC20(_redeemToken).balanceOf(address(this));\r\n\r\n        // Difference between redeemTokens balance and cache.\r\n        require(inRedeems > 0, \"ERR_ZERO\");\r\n        require(strikeBalance >= inRedeems, \"ERR_BAL_STRIKE\");\r\n\r\n        // Burn redeemTokens in the contract. Send strikeTokens to receiver.\r\n        IRedeem(_redeemToken).burn(address(this), inRedeems);\r\n        IERC20(strikeToken).safeTransfer(receiver, inRedeems);\r\n\r\n        // Current balances.\r\n        strikeBalance = IERC20(strikeToken).balanceOf(address(this));\r\n\r\n        // Update the cached balances.\r\n        _updateCacheBalances(underlyingCache, strikeBalance);\r\n        emit Redeem(msg.sender, inRedeems);\r\n        return inRedeems;\r\n    }\r\n\r\n    /**\r\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\r\n     * This function should never be called directly by an externally owned account.\r\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\r\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\r\n     * into this contract, and this function is called, it can result in the loss of funds.\r\n     * If the option has expired, burn redeem tokens to withdraw underlying tokens.\r\n     * If the option is not expired, burn option and redeem tokens to withdraw underlying tokens.\r\n     * @notice inRedeemTokens / strike ratio = outUnderlyingTokens && inOptionTokens >= outUnderlyingTokens.\r\n     * @param receiver The outUnderlyingTokens are sent to the receiver address.\r\n     */\r\n    function closeOptions(address receiver)\r\n        external\r\n        override\r\n        nonReentrant\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // Stores addresses and balances locally for gas savings.\r\n        address underlyingToken = optionParameters.underlyingToken;\r\n        address _redeemToken = redeemToken;\r\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 optionBalance = balanceOf(address(this));\r\n        uint256 inRedeems = IERC20(_redeemToken).balanceOf(address(this));\r\n\r\n        // The quantity of underlyingToken to send out it still determined by the quantity of inRedeems.\r\n        // inRedeems is in units of strikeTokens, which is converted to underlyingTokens\r\n        // by multiplying inRedeems by the strike ratio, which is base / quote.\r\n        // This outUnderlyings quantity is checked against inOptions.\r\n        // inOptions must be greater than or equal to outUnderlyings (1 option burned per 1 underlying purchased).\r\n        // optionBalance must be greater than or equal to outUnderlyings.\r\n        // Neither inRedeems or inOptions can be zero.\r\n        uint256 outUnderlyings = inRedeems.mul(optionParameters.base).div(\r\n            optionParameters.quote\r\n        );\r\n\r\n        // Assumes the cached balance is 0 so inOptions = balance of optionToken.\r\n        // If optionToken is expired, optionToken does not need to be sent in. Only redeemToken.\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uint256 inOptions = isNotExpired() ? optionBalance : outUnderlyings;\r\n        require(inRedeems > 0 && inOptions > 0, \"ERR_ZERO\");\r\n        require(\r\n            inOptions >= outUnderlyings && underlyingBalance >= outUnderlyings,\r\n            \"ERR_BAL_UNDERLYING\"\r\n        );\r\n\r\n        // Burn optionTokens. optionTokens are only sent into contract when not expired.\r\n        // solhint-disable-next-line not-rely-on-time\r\n        if (isNotExpired()) {\r\n            _burn(address(this), inOptions);\r\n        }\r\n\r\n        // Send underlyingTokens to user.\r\n        // Burn redeemTokens held in the contract.\r\n        // User does not receive extra underlyingTokens if there was extra optionTokens in the contract.\r\n        // User receives outUnderlyings proportional to inRedeems.\r\n        IRedeem(_redeemToken).burn(address(this), inRedeems);\r\n        IERC20(underlyingToken).safeTransfer(receiver, outUnderlyings);\r\n\r\n        // Current balances of underlyingToken and redeemToken.\r\n        underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\r\n\r\n        // Update the cached balances.\r\n        _updateCacheBalances(underlyingBalance, strikeCache);\r\n        emit Close(msg.sender, outUnderlyings);\r\n        return (inRedeems, inOptions, outUnderlyings);\r\n    }\r\n\r\n    /* === VIEW === */\r\n\r\n    /**\r\n     * @dev Returns the previously saved balances of underlying and strike tokens.\r\n     */\r\n    function getCacheBalances()\r\n        public\r\n        override\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (underlyingCache, strikeCache);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the underlying, strike, and redeem token addresses.\r\n     */\r\n    function getAssetAddresses()\r\n        public\r\n        override\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address\r\n        )\r\n    {\r\n        return (\r\n            optionParameters.underlyingToken,\r\n            optionParameters.strikeToken,\r\n            redeemToken\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the strike token address.\r\n     */\r\n    function getStrikeTokenAddress() public override view returns (address) {\r\n        return optionParameters.strikeToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the underlying token address.\r\n     */\r\n    function getUnderlyingTokenAddress()\r\n        public\r\n        override\r\n        view\r\n        returns (address)\r\n    {\r\n        return optionParameters.underlyingToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the base value option parameter.\r\n     */\r\n    function getBaseValue() public override view returns (uint256) {\r\n        return optionParameters.base;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the quote value option parameter.\r\n     */\r\n    function getQuoteValue() public override view returns (uint256) {\r\n        return optionParameters.quote;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the expiry timestamp option parameter.\r\n     */\r\n    function getExpiryTime() public override view returns (uint256) {\r\n        return optionParameters.expiry;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the option parameters and redeem token address.\r\n     */\r\n    function getParameters()\r\n        public\r\n        override\r\n        view\r\n        returns (\r\n            address _underlyingToken,\r\n            address _strikeToken,\r\n            address _redeemToken,\r\n            uint256 _base,\r\n            uint256 _quote,\r\n            uint256 _expiry\r\n        )\r\n    {\r\n        OptionParameters memory _optionParameters = optionParameters;\r\n        _underlyingToken = _optionParameters.underlyingToken;\r\n        _strikeToken = _optionParameters.strikeToken;\r\n        _redeemToken = redeemToken;\r\n        _base = _optionParameters.base;\r\n        _quote = _optionParameters.quote;\r\n        _expiry = _optionParameters.expiry;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to check if the option is expired.\r\n     */\r\n    function isNotExpired() internal view returns (bool) {\r\n        return optionParameters.expiry >= block.timestamp;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/option/libraries/OptionTemplateLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\nimport { Option } from \"../primitives/Option.sol\";\n\nlibrary OptionTemplateLib {\n    // solhint-disable-next-line max-line-length\n    bytes32\n        private constant _OPTION_SALT = 0x56f3a99c8e36689645460020839ea1340cbbb2e507b7effe3f180a89db85dd87; // keccak(\"primitive-option\")\n\n    // solhint-disable-next-line func-name-mixedcase\n    function OPTION_SALT() internal pure returns (bytes32) {\n        return _OPTION_SALT;\n    }\n\n    /**\n     * @dev Deploys a clone of the deployed Option.sol contract.\n     */\n    function deployTemplate() external returns (address implementationAddress) {\n        bytes memory creationCode = type(Option).creationCode;\n        implementationAddress = Create2.deploy(0, _OPTION_SALT, creationCode);\n    }\n}\n"
    },
    "contracts/option/applications/NullCloneConstructor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.2;\n\ncontract NullCloneConstructor {\n    // solhint-disable-next-line no-empty-blocks\n    function cloneConstructor(bytes memory consData) public {\n        // blank\n    }\n}\n"
    },
    "contracts/option/libraries/CloneLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @title Create2 Clone Factory Library\n * @author Alan Lu, Gnosis.\n *         Raymond Pulver IV.\n */\n\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\n\nlibrary CloneLib {\n    /**\n     * @dev Calls internal creation computation function.\n     */\n    function computeCreationCode(address target)\n        internal\n        view\n        returns (bytes memory clone)\n    {\n        clone = computeCreationCode(address(this), target);\n    }\n\n    /**\n     * @dev Computes the Clone's creation code.\n     */\n    function computeCreationCode(address deployer, address target)\n        internal\n        pure\n        returns (bytes memory clone)\n    {\n        bytes memory consData = abi.encodeWithSignature(\n            \"cloneConstructor(bytes)\",\n            new bytes(0)\n        );\n        clone = new bytes(99 + consData.length);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(\n                add(clone, 0x20),\n                0x3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe\n            )\n            mstore(\n                add(clone, 0x2d),\n                mul(deployer, 0x01000000000000000000000000)\n            )\n            mstore(\n                add(clone, 0x41),\n                0x5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be\n            )\n            mstore(add(clone, 0x60), mul(target, 0x01000000000000000000000000))\n            mstore(\n                add(clone, 116),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n        }\n        for (uint256 i = 0; i < consData.length; i++) {\n            clone[i + 99] = consData[i];\n        }\n    }\n\n    /**\n     * @dev Calls Open Zeppelin's Create2.computeAddress() to get an address for the clone.\n     */\n    function deriveInstanceAddress(address target, bytes32 salt)\n        internal\n        view\n        returns (address)\n    {\n        return\n            Create2.computeAddress(\n                salt,\n                keccak256(computeCreationCode(target))\n            );\n    }\n\n    /**\n     * @dev Calls Open Zeppelin's Create2.computeAddress() to get an address for the clone.\n     */\n    function deriveInstanceAddress(\n        address from,\n        address target,\n        bytes32 salt\n    ) internal pure returns (address) {\n        return\n            Create2.computeAddress(\n                salt,\n                keccak256(computeCreationCode(from, target)),\n                from\n            );\n    }\n\n    /**\n     * @dev Computs creation code, and then instantiates it with create2.\n     */\n    function create2Clone(address target, uint256 saltNonce)\n        internal\n        returns (address result)\n    {\n        bytes memory clone = computeCreationCode(target);\n        bytes32 salt = bytes32(saltNonce);\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let len := mload(clone)\n            let data := add(clone, 0x20)\n            result := create2(0, data, len, salt)\n        }\n\n        require(result != address(0), \"ERR_CREATE2_FAIL\");\n    }\n}\n"
    },
    "contracts/option/interfaces/IOptionFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IOptionFactory {\r\n    function deployClone(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external returns (address);\r\n\r\n    function initRedeemToken(address optionAddress, address redeemAddress)\r\n        external;\r\n\r\n    function deployOptionTemplate() external;\r\n\r\n    function optionTemplate() external returns (address);\r\n\r\n    function calculateOptionAddress(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external view returns (address);\r\n}\r\n"
    },
    "contracts/option/interfaces/IOption.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ninterface IOption is IERC20 {\r\n    function mintOptions(address receiver) external returns (uint256, uint256);\r\n\r\n    function exerciseOptions(\r\n        address receiver,\r\n        uint256 outUnderlyings,\r\n        bytes calldata data\r\n    ) external returns (uint256, uint256);\r\n\r\n    function redeemStrikeTokens(address receiver) external returns (uint256);\r\n\r\n    function closeOptions(address receiver)\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function redeemToken() external view returns (address);\r\n\r\n    function getStrikeTokenAddress() external view returns (address);\r\n\r\n    function getUnderlyingTokenAddress() external view returns (address);\r\n\r\n    function getBaseValue() external view returns (uint256);\r\n\r\n    function getQuoteValue() external view returns (uint256);\r\n\r\n    function getExpiryTime() external view returns (uint256);\r\n\r\n    function underlyingCache() external view returns (uint256);\r\n\r\n    function strikeCache() external view returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function getCacheBalances() external view returns (uint256, uint256);\r\n\r\n    function getAssetAddresses()\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address\r\n        );\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            address _underlyingToken,\r\n            address _strikeToken,\r\n            address _redeemToken,\r\n            uint256 _base,\r\n            uint256 _quote,\r\n            uint256 _expiry\r\n        );\r\n\r\n    function initRedeemToken(address _redeemToken) external;\r\n\r\n    function updateCacheBalances() external;\r\n}\r\n"
    },
    "contracts/option/interfaces/IRedeem.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ninterface IRedeem is IERC20 {\r\n    function optionToken() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function mint(address user, uint256 amount) external;\r\n\r\n    function burn(address user, uint256 amount) external;\r\n\r\n    function initialize(address _factory, address _optionToken) external;\r\n}\r\n"
    },
    "contracts/option/interfaces/IFlash.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IFlash {\r\n    function primitiveFlash(\r\n        address receiver,\r\n        uint256 outUnderlyings,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/option/primitives/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Modifies name, symbol, and decimals by deleting them. Implemented as constants in parent contract.\n */\n\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        virtual\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    /* function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    } */\n\n    // ======= WARNING: ADDED FUNCTIONS =========\n\n    /* function _setupName(string memory name_) internal {\n        _name = name_;\n    }\n\n    function _setupSymbol(string memory symbol_) internal {\n        _symbol = symbol_;\n    } */\n\n    // ======= END ADDED FUNCTIONS =========\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(bytes20(_data << 96));\n    }\n}\n"
    },
    "contracts/option/applications/Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\n/**\r\n * @title Protocol Registry Contract for Deployed Options.\r\n * @author Primitive\r\n */\r\n\r\nimport { IOption } from \"../interfaces/IOption.sol\";\r\nimport { IRegistry } from \"../interfaces/IRegistry.sol\";\r\nimport { IOptionFactory } from \"../interfaces/IOptionFactory.sol\";\r\nimport { IRedeemFactory } from \"../interfaces/IRedeemFactory.sol\";\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { Pausable } from \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport {\r\n    ReentrancyGuard\r\n} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract Registry is IRegistry, Ownable, Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    address public override optionFactory;\r\n    address public override redeemFactory;\r\n\r\n    mapping(address => bool) private verifiedTokens;\r\n    mapping(uint256 => bool) private verifiedExpiries;\r\n    address[] public allOptionClones;\r\n\r\n    event UpdatedOptionFactory(address indexed optionFactory_);\r\n    event UpdatedRedeemFactory(address indexed redeemFactory_);\r\n    event VerifiedToken(address indexed token);\r\n    event VerifiedExpiry(uint256 expiry);\r\n    event UnverifiedToken(address indexed token);\r\n    event UnverifiedExpiry(uint256 expiry);\r\n    event DeployedOptionClone(\r\n        address indexed from,\r\n        address indexed optionAddress,\r\n        address indexed redeemAddress\r\n    );\r\n\r\n    constructor() public {\r\n        transferOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses the deployOption function.\r\n     */\r\n    function pauseDeployments() external override onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses the deployOption function.\r\n     */\r\n    function unpauseDeployments() external override onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the option factory contract to use for deploying clones.\r\n     * @param optionFactory_ The address of the option factory.\r\n     */\r\n    function setOptionFactory(address optionFactory_)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        optionFactory = optionFactory_;\r\n        emit UpdatedOptionFactory(optionFactory_);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the redeem factory contract to use for deploying clones.\r\n     * @param redeemFactory_ The address of the redeem factory.\r\n     */\r\n    function setRedeemFactory(address redeemFactory_)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        redeemFactory = redeemFactory_;\r\n        emit UpdatedRedeemFactory(redeemFactory_);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets an ERC-20 token verification status to true.\r\n     * @notice A \"verified\" token is a standard ERC-20 token that we have tested with the option contract.\r\n     *         An example of an \"unverified\" token is a non-standard ERC-20 token which has not been tested.\r\n     */\r\n    function verifyToken(address tokenAddress) external override onlyOwner {\r\n        require(tokenAddress != address(0x0), \"ERR_ZERO_ADDRESS\");\r\n        verifiedTokens[tokenAddress] = true;\r\n        emit VerifiedToken(tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a verified token's verification status to false.\r\n     */\r\n    function unverifyToken(address tokenAddress) external override onlyOwner {\r\n        verifiedTokens[tokenAddress] = false;\r\n        emit UnverifiedToken(tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets an expiry timestamp's verification status to true.\r\n     * @notice A mapping of standardized, \"verified\", timestamps for the options.\r\n     */\r\n    function verifyExpiry(uint256 expiry) external override onlyOwner {\r\n        require(expiry >= now, \"ERR_EXPIRED_TIMESTAMP\");\r\n        verifiedExpiries[expiry] = true;\r\n        emit VerifiedExpiry(expiry);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets an expiry timestamp's verification status to false.\r\n     * @notice A mapping of standardized, \"verified\", timestamps for the options.\r\n     */\r\n    function unverifyExpiry(uint256 expiry) external override onlyOwner {\r\n        verifiedExpiries[expiry] = false;\r\n        emit UnverifiedExpiry(expiry);\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys an option contract clone with create2.\r\n     * @param underlyingToken The address of the ERC-20 underlying token.\r\n     * @param strikeToken The address of the ERC-20 strike token.\r\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\r\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\r\n     * @param expiry The unix timestamp of the option's expiration date.\r\n     * @return The address of the deployed option clone.\r\n     */\r\n    function deployOption(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external override nonReentrant whenNotPaused returns (address) {\r\n        // Validation checks for option parameters.\r\n        require(base > 0, \"ERR_BASE_ZERO\");\r\n        require(quote > 0, \"ERR_QUOTE_ZERO\");\r\n        require(expiry >= now, \"ERR_EXPIRY\");\r\n        require(underlyingToken != strikeToken, \"ERR_SAME_ASSETS\");\r\n        require(\r\n            underlyingToken != address(0x0) && strikeToken != address(0x0),\r\n            \"ERR_ZERO_ADDRESS\"\r\n        );\r\n\r\n        // Deploy option and redeem contract clones.\r\n        address optionAddress = IOptionFactory(optionFactory).deployClone(\r\n            underlyingToken,\r\n            strikeToken,\r\n            base,\r\n            quote,\r\n            expiry\r\n        );\r\n        address redeemAddress = IRedeemFactory(redeemFactory).deployClone(\r\n            optionAddress\r\n        );\r\n\r\n        // Add the clone to the allOptionClones address array.\r\n        allOptionClones.push(optionAddress);\r\n\r\n        // Initialize the new option contract's paired redeem token.\r\n        IOptionFactory(optionFactory).initRedeemToken(\r\n            optionAddress,\r\n            redeemAddress\r\n        );\r\n        emit DeployedOptionClone(msg.sender, optionAddress, redeemAddress);\r\n        return optionAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the option address deployed with create2 using the parameter arguments.\r\n     * @param underlyingToken The address of the ERC-20 underlying token.\r\n     * @param strikeToken The address of the ERC-20 strike token.\r\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\r\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\r\n     * @param expiry The unix timestamp of the option's expiration date.\r\n     * @return The address of the option with the parameter arguments.\r\n     */\r\n    function calculateOptionAddress(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) public override view returns (address) {\r\n        address optionAddress = IOptionFactory(optionFactory)\r\n            .calculateOptionAddress(\r\n            underlyingToken,\r\n            strikeToken,\r\n            base,\r\n            quote,\r\n            expiry\r\n        );\r\n        return optionAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks an option address to see if it has verified assets and expiry time.\r\n     * @param optionAddress The address of the option token.\r\n     * @return bool If the option has verified underlying and strike tokens, and expiry time.\r\n     */\r\n    function isVerifiedOption(address optionAddress)\r\n        external\r\n        override\r\n        view\r\n        returns (bool)\r\n    {\r\n        IOption option = IOption(optionAddress);\r\n        address underlyingToken = option.getUnderlyingTokenAddress();\r\n        address strikeToken = option.getStrikeTokenAddress();\r\n        uint256 expiry = option.getExpiryTime();\r\n        bool verifiedUnderlying = isVerifiedToken(underlyingToken);\r\n        bool verifiedStrike = isVerifiedToken(strikeToken);\r\n        bool verifiedExpiry = isVerifiedExpiry(expiry);\r\n        return verifiedUnderlying && verifiedStrike && verifiedExpiry;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of the allOptionClones address array.\r\n     */\r\n    function getAllOptionClonesLength() public view returns (uint256) {\r\n        return allOptionClones.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the verifiedTokens private mapping and returns verification status of token.\r\n     * @return bool Verified or not verified.\r\n     */\r\n    function isVerifiedToken(address tokenAddress) public view returns (bool) {\r\n        return verifiedTokens[tokenAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the verifiedExpiries private mapping and returns verification status of token.\r\n     * @return bool Verified or not verified.\r\n     */\r\n    function isVerifiedExpiry(uint256 expiry) public view returns (bool) {\r\n        return verifiedExpiries[expiry];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the option address and returns address zero if not yet deployed.\r\n     * @notice Will calculate the option address using the parameter arguments.\r\n     *         Checks the code size of the address to see if the contract has been deployed yet.\r\n     *         If contract has not been deployed, returns address zero.\r\n     * @param underlyingToken The address of the ERC-20 underlying token.\r\n     * @param strikeToken The address of the ERC-20 strike token.\r\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\r\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\r\n     * @param expiry The unix timestamp of the option's expiration date.\r\n     * @return The address of the option with the parameter arguments.\r\n     */\r\n    function getOptionAddress(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) public override view returns (address) {\r\n        address optionAddress = calculateOptionAddress(\r\n            underlyingToken,\r\n            strikeToken,\r\n            base,\r\n            quote,\r\n            expiry\r\n        );\r\n        uint32 size = checkCodeSize(optionAddress);\r\n        if (size > 0) {\r\n            return optionAddress;\r\n        } else {\r\n            return address(0x0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the code size of a target address and returns the uint32 size.\r\n     * @param target The address to check code size.\r\n     */\r\n    function checkCodeSize(address target) private view returns (uint32) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(target)\r\n        }\r\n        return size;\r\n    }\r\n}\r\n"
    },
    "contracts/option/interfaces/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IRegistry {\r\n    function pauseDeployments() external;\r\n\r\n    function unpauseDeployments() external;\r\n\r\n    function deployOption(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external returns (address);\r\n\r\n    function setOptionFactory(address optionFactory_) external;\r\n\r\n    function setRedeemFactory(address redeemFactory_) external;\r\n\r\n    function optionFactory() external returns (address);\r\n\r\n    function redeemFactory() external returns (address);\r\n\r\n    function verifyToken(address tokenAddress) external;\r\n\r\n    function verifyExpiry(uint256 expiry) external;\r\n\r\n    function unverifyToken(address tokenAddress) external;\r\n\r\n    function unverifyExpiry(uint256 expiry) external;\r\n\r\n    function calculateOptionAddress(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external view returns (address);\r\n\r\n    function getOptionAddress(\r\n        address underlyingToken,\r\n        address strikeToken,\r\n        uint256 base,\r\n        uint256 quote,\r\n        uint256 expiry\r\n    ) external view returns (address);\r\n\r\n    function isVerifiedOption(address optionAddress)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n"
    },
    "contracts/option/interfaces/IRedeemFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\ninterface IRedeemFactory {\r\n    function deployClone(address optionToken) external returns (address);\r\n\r\n    function deployRedeemTemplate() external;\r\n\r\n    function redeemTemplate() external returns (address);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    constructor () internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n"
    },
    "contracts/test/tokens/BadERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract BadERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        virtual\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        // do nothing\r\n    }\r\n}\r\n"
    },
    "contracts/option/libraries/TraderLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @title   Trader Library\n * @notice  Internal functions that can be used to safeTransfer\n *          tokens into the option contract then call respective option contract functions.\n * @author  Primitive\n */\n\nimport { IOption } from \"../interfaces/IOption.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nlibrary TraderLib {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Conducts important safety checks to safely mint option tokens.\n     * @param optionToken The address of the option token to mint.\n     * @param mintQuantity The quantity of option tokens to mint.\n     * @param receiver The address which receives the minted option tokens.\n     */\n    function safeMint(\n        IOption optionToken,\n        uint256 mintQuantity,\n        address receiver\n    ) internal returns (uint256, uint256) {\n        require(mintQuantity > 0, \"ERR_ZERO\");\n        IERC20(optionToken.getUnderlyingTokenAddress()).safeTransferFrom(\n            msg.sender,\n            address(optionToken),\n            mintQuantity\n        );\n        (uint256 outputOptions, uint256 outputRedeems) = optionToken\n            .mintOptions(receiver);\n        return (outputOptions, outputRedeems);\n    }\n\n    /**\n     * @dev Swaps strikeTokens to underlyingTokens using the strike ratio as the exchange rate.\n     * @notice Burns optionTokens, option contract receives strikeTokens, user receives underlyingTokens.\n     * @param optionToken The address of the option contract.\n     * @param exerciseQuantity Quantity of optionTokens to exercise.\n     * @param receiver The underlyingTokens are sent to the receiver address.\n     */\n    function safeExercise(\n        IOption optionToken,\n        uint256 exerciseQuantity,\n        address receiver\n    ) internal returns (uint256, uint256) {\n        require(exerciseQuantity > 0, \"ERR_ZERO\");\n        require(\n            IERC20(address(optionToken)).balanceOf(msg.sender) >=\n                exerciseQuantity,\n            \"ERR_BAL_OPTIONS\"\n        );\n\n        // Calculate quantity of strikeTokens needed to exercise quantity of optionTokens.\n        uint256 inputStrikes = exerciseQuantity\n            .mul(optionToken.getQuoteValue())\n            .div(optionToken.getBaseValue());\n        require(\n            IERC20(optionToken.getStrikeTokenAddress()).balanceOf(msg.sender) >=\n                inputStrikes,\n            \"ERR_BAL_STRIKE\"\n        );\n        IERC20(optionToken.getStrikeTokenAddress()).safeTransferFrom(\n            msg.sender,\n            address(optionToken),\n            inputStrikes\n        );\n        IERC20(address(optionToken)).safeTransferFrom(\n            msg.sender,\n            address(optionToken),\n            exerciseQuantity\n        );\n\n        uint256 inputOptions;\n        (inputStrikes, inputOptions) = optionToken.exerciseOptions(\n            receiver,\n            exerciseQuantity,\n            new bytes(0)\n        );\n        return (inputStrikes, inputOptions);\n    }\n\n    /**\n     * @dev Burns redeemTokens to withdraw available strikeTokens.\n     * @notice inputRedeems = outputStrikes.\n     * @param optionToken The address of the option contract.\n     * @param redeemQuantity redeemQuantity of redeemTokens to burn.\n     * @param receiver The strikeTokens are sent to the receiver address.\n     */\n    function safeRedeem(\n        IOption optionToken,\n        uint256 redeemQuantity,\n        address receiver\n    ) internal returns (uint256) {\n        require(redeemQuantity > 0, \"ERR_ZERO\");\n        require(\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\n                redeemQuantity,\n            \"ERR_BAL_REDEEM\"\n        );\n        // There can be the case there is no available strikes to redeem, causing a revert.\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\n            msg.sender,\n            address(optionToken),\n            redeemQuantity\n        );\n        uint256 inputRedeems = optionToken.redeemStrikeTokens(receiver);\n        return inputRedeems;\n    }\n\n    /**\n     * @dev Burn optionTokens and redeemTokens to withdraw underlyingTokens.\n     * @notice The redeemTokens to burn is equal to the optionTokens * strike ratio.\n     * inputOptions = inputRedeems / strike ratio = outUnderlyings\n     * @param optionToken The address of the option contract.\n     * @param closeQuantity Quantity of optionTokens to burn.\n     * (Implictly will burn the strike ratio quantity of redeemTokens).\n     * @param receiver The underlyingTokens are sent to the receiver address.\n     */\n    function safeClose(\n        IOption optionToken,\n        uint256 closeQuantity,\n        address receiver\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(closeQuantity > 0, \"ERR_ZERO\");\n        require(\n            IERC20(address(optionToken)).balanceOf(msg.sender) >= closeQuantity,\n            \"ERR_BAL_OPTIONS\"\n        );\n\n        // Calculate the quantity of redeemTokens that need to be burned. (What we mean by Implicit).\n        uint256 inputRedeems = closeQuantity\n            .mul(optionToken.getQuoteValue())\n            .div(optionToken.getBaseValue());\n        require(\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\n                inputRedeems,\n            \"ERR_BAL_REDEEM\"\n        );\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\n            msg.sender,\n            address(optionToken),\n            inputRedeems\n        );\n        IERC20(address(optionToken)).safeTransferFrom(\n            msg.sender,\n            address(optionToken),\n            closeQuantity\n        );\n\n        uint256 inputOptions;\n        uint256 outUnderlyings;\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\n            receiver\n        );\n        return (inputRedeems, inputOptions, outUnderlyings);\n    }\n\n    /**\n     * @dev Burn redeemTokens to withdraw underlyingTokens and strikeTokens from expired options.\n     * @param optionToken The address of the option contract.\n     * @param unwindQuantity Quantity of option tokens used to calculate the amount of redeem tokens to burn.\n     * @param receiver The underlyingTokens are sent to the receiver address and the redeemTokens are burned.\n     */\n    function safeUnwind(\n        IOption optionToken,\n        uint256 unwindQuantity,\n        address receiver\n    )\n        internal\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        // Checks\n        require(unwindQuantity > 0, \"ERR_ZERO\");\n        // solhint-disable-next-line not-rely-on-time\n        require(\n            optionToken.getExpiryTime() < block.timestamp,\n            \"ERR_NOT_EXPIRED\"\n        );\n\n        // Calculate amount of redeems required\n        uint256 inputRedeems = unwindQuantity\n            .mul(optionToken.getQuoteValue())\n            .div(optionToken.getBaseValue());\n        require(\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\n                inputRedeems,\n            \"ERR_BAL_REDEEM\"\n        );\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\n            msg.sender,\n            address(optionToken),\n            inputRedeems\n        );\n\n        uint256 inputOptions;\n        uint256 outUnderlyings;\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\n            receiver\n        );\n\n        return (inputRedeems, inputOptions, outUnderlyings);\n    }\n}\n"
    },
    "contracts/test/Flash.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @title Test Flash Exercise contract\n * @author Primitive\n */\n\n/**\n * A flash exercise is initiated by the exerciseOptions() function in the Option.sol contract.\n * Warning: Only correctly implemented wrapper smart contracts can safely execute these flash features.\n * Underlying tokens will be sent to the msg.sender of the exerciseOptions() call first.\n * The msg.sender should be a smart contract that implements the IFlash interface, which has a single\n * function: primitiveFlash().\n * The callback function primitiveFlash() can be triggered by passing in any arbritrary data to the\n * exerciseOptions() function. If the length of the data is greater than 0, it triggers the callback.\n * The implemented primitiveFlash() callback is where customized operations can be undertaken using the\n * underlying tokens received from the flash exercise.\n * After the callback function (whether its called or not), the exerciseOptions() function checks to see\n * if it has been paid the correct amount of strike and option tokens (an actual exercise of the option),\n * or if it has received the same quantity of underlying tokens back (a flash loan).\n */\n\nimport { IOption } from \"../option/interfaces/IOption.sol\";\nimport { IFlash } from \"../option/interfaces/IFlash.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Flash is IFlash {\n    using SafeMath for uint256;\n\n    address public optionToken;\n\n    event FlashExercise(address indexed from);\n\n    constructor(address _optionToken) public {\n        optionToken = _optionToken;\n    }\n\n    function goodFlashLoan(uint256 amount) external {\n        // Call the exerciseOptions function and trigger the fallback function by passing in data\n        IOption(optionToken).exerciseOptions(\n            address(this),\n            amount,\n            new bytes(1)\n        );\n    }\n\n    function badFlashLoan(uint256 amount) external {\n        // Call the exerciseOptions function and trigger the fallback function by passing in data\n        // bytes(2) will cause our implemented flash exercise to fail\n        IOption(optionToken).exerciseOptions(\n            address(this),\n            amount,\n            new bytes(2)\n        );\n    }\n\n    /**\n     * @dev An implemented primitiveFlash callback function that matches the interface in Option.sol.\n     * @notice Calling the exerciseOptions() function in the Option contract will trigger this callback function.\n     * @param receiver The account which receives the underlying tokens.\n     * @param outUnderlyings The quantity of underlying tokens received as a flash loan.\n     * @param data Any data that will be passed as an argument to the original exerciseOptions() call.\n     */\n    function primitiveFlash(\n        address receiver,\n        uint256 outUnderlyings,\n        bytes calldata data\n    ) external override {\n        // Get the underlying token address.\n        address underlyingToken = IOption(optionToken)\n            .getUnderlyingTokenAddress();\n        // In our test case we pass in the data param with bytes(1).\n        bool good = keccak256(abi.encodePacked(data)) ==\n            keccak256(abi.encodePacked(new bytes(1)));\n        // If the flash exercise went through, we return the loaned underlyings.\n        if (good) {\n            IERC20(underlyingToken).transfer(optionToken, outUnderlyings);\n        }\n        emit FlashExercise(receiver);\n    }\n}\n"
    },
    "contracts/test/OptionTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @title   Option test contract.\n * @author  Primitive\n */\n\nimport \"../option/primitives/Option.sol\";\n\ncontract OptionTest is Option {\n    // solhint-disable-next-line no-empty-blocks\n    constructor() public Option() {}\n\n    function setExpiry(uint256 expiry) public {\n        optionParameters.expiry = expiry;\n    }\n\n    function setRedeemToken(address redeem) public {\n        redeemToken = redeem;\n    }\n}\n"
    },
    "contracts/option/libraries/RedeemTemplateLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\nimport { Redeem } from \"../primitives/Redeem.sol\";\n\nlibrary RedeemTemplateLib {\n    // solhint-disable-next-line max-line-length\n    bytes32\n        private constant _REDEEM_SALT = 0xe7383acf78b06b8f24cfa7359d041702736fa6a58e63dd38afea80889c4636e2; // keccak(\"primitive-redeem\")\n\n    // solhint-disable-next-line func-name-mixedcase\n    function REDEEM_SALT() internal pure returns (bytes32) {\n        return _REDEEM_SALT;\n    }\n\n    /**\n     * @dev Deploys a clone of the deployed Redeem.sol contract.\n     */\n    function deployTemplate() external returns (address implementationAddress) {\n        bytes memory creationCode = type(Redeem).creationCode;\n        implementationAddress = Create2.deploy(0, _REDEEM_SALT, creationCode);\n    }\n}\n"
    },
    "contracts/option/primitives/Redeem.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.2;\r\n\r\n/**\r\n * @title   Redeem Token\r\n * @notice  A token that is redeemable for it's paird option token's assets.\r\n * @author  Primitive\r\n */\r\n\r\nimport { IRedeem } from \"../interfaces/IRedeem.sol\";\r\nimport { ERC20 } from \"./ERC20.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract Redeem is IRedeem, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address public override factory;\r\n    address public override optionToken;\r\n\r\n    string public constant name = \"Primitive V1 Redeem\";\r\n    string public constant symbol = \"RDM\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @dev Sets the initial state for the redeem token. Called only once and immediately after deployment.\r\n     * @param factory_ The address of the factory contract which handles the deployment.\r\n     * @param optionToken_ The address of the option token which this redeem token will be paired with.\r\n     */\r\n    function initialize(address factory_, address optionToken_)\r\n        public\r\n        override\r\n    {\r\n        require(factory == address(0x0), \"ERR_IS_INITIALIZED\");\r\n        factory = factory_;\r\n        optionToken = optionToken_;\r\n    }\r\n\r\n    /**\r\n     * @dev Mints redeem tokens. Only callable by the paired option contract.\r\n     * @param to The address to mint redeem tokens to.\r\n     * @param amount The quantity of redeem tokens to mint.\r\n     */\r\n    function mint(address to, uint256 amount) external override {\r\n        require(msg.sender == optionToken, \"ERR_NOT_VALID\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns redeem tokens. Only callable by the paired option contract.\r\n     * @param to The address to burn redeem tokens from.\r\n     * @param amount The quantity of redeem tokens to burn.\r\n     */\r\n    function burn(address to, uint256 amount) external override {\r\n        require(msg.sender == optionToken, \"ERR_NOT_VALID\");\r\n        _burn(to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/option/applications/factories/RedeemFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\n/**\r\n * @title Protocol Factory Contract for Redeem Tokens.\r\n * @notice Uses cloning technology on a deployed template contract.\r\n * @author Primitive\r\n */\r\n\r\nimport { Redeem, SafeMath } from \"../../primitives/Redeem.sol\";\r\nimport { RedeemTemplateLib } from \"../../libraries/RedeemTemplateLib.sol\";\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { CloneLib } from \"../../libraries/CloneLib.sol\";\r\nimport { NullCloneConstructor } from \"../NullCloneConstructor.sol\";\r\nimport { IRedeemFactory } from \"../../interfaces/IRedeemFactory.sol\";\r\n\r\ncontract RedeemFactory is IRedeemFactory, Ownable, NullCloneConstructor {\r\n    using SafeMath for uint256;\r\n\r\n    address public override redeemTemplate;\r\n\r\n    constructor(address registry) public {\r\n        transferOwnership(registry);\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys the full bytecode of the Redeem contract to be used as a template for clones.\r\n     */\r\n    function deployRedeemTemplate() public override {\r\n        redeemTemplate = RedeemTemplateLib.deployTemplate();\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys a cloned instance of the template Redeem contract.\r\n     * @param optionToken The address of the option token which this redeem clone will be paired with.\r\n     * @return redeemAddress The address of the deployed Redeem token clone.\r\n     */\r\n    function deployClone(address optionToken)\r\n        external\r\n        override\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(\r\n                RedeemTemplateLib.REDEEM_SALT(),\r\n                owner(),\r\n                optionToken\r\n            )\r\n        );\r\n        address redeemAddress = CloneLib.create2Clone(\r\n            redeemTemplate,\r\n            uint256(salt)\r\n        );\r\n        Redeem(redeemAddress).initialize(owner(), optionToken);\r\n        return redeemAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/test/tokens/USDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract USDC is ERC20 {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply\r\n    ) public ERC20(name, symbol) {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/test/tokens/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract TestERC20 is ERC20 {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply\r\n    ) public ERC20(name, symbol) {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/test/tokens/DAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract DAI is ERC20 {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply\r\n    ) public ERC20(name, symbol) {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) public returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/option/interfaces/ITrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.2;\r\n\r\nimport { IOption } from \"./IOption.sol\";\r\n\r\ninterface ITrader {\r\n    function safeMint(\r\n        IOption optionToken,\r\n        uint256 mintQuantity,\r\n        address receiver\r\n    ) external returns (uint256, uint256);\r\n\r\n    function safeExercise(\r\n        IOption optionToken,\r\n        uint256 exerciseQuantity,\r\n        address receiver\r\n    ) external returns (uint256, uint256);\r\n\r\n    function safeRedeem(\r\n        IOption optionToken,\r\n        uint256 redeemQuantity,\r\n        address receiver\r\n    ) external returns (uint256);\r\n\r\n    function safeClose(\r\n        IOption optionToken,\r\n        uint256 closeQuantity,\r\n        address receiver\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function safeUnwind(\r\n        IOption optionToken,\r\n        uint256 unwindQuantity,\r\n        address receiver\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n"
    },
    "contracts/option/extensions/Trader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.2;\n\n/**\n * @title   Trader\n * @notice  Abstracts the interfacing with the protocol's option contract for ease-of-use.\n * @author  Primitive\n */\n\nimport { IOption } from \"../interfaces/IOption.sol\";\nimport { ITrader } from \"../interfaces/ITrader.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport {\n    ReentrancyGuard\n} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { TraderLib } from \"../libraries/TraderLib.sol\";\n\ncontract Trader is ITrader, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    address payable public weth;\n\n    event TraderMint(\n        address indexed from,\n        address indexed option,\n        uint256 outputOptions,\n        uint256 outputRedeems\n    );\n    event TraderExercise(\n        address indexed from,\n        address indexed option,\n        uint256 outUnderlyings,\n        uint256 inStrikes\n    );\n    event TraderRedeem(\n        address indexed from,\n        address indexed option,\n        uint256 inRedeems\n    );\n    event TraderClose(\n        address indexed from,\n        address indexed option,\n        uint256 inOptions\n    );\n\n    event TraderUnwind(\n        address indexed from,\n        address indexed option,\n        uint256 inOptions\n    );\n\n    constructor(address payable _weth) public {\n        weth = _weth;\n    }\n\n    /**\n     * @dev Mint options at a 1:1 ratio with deposited underlying tokens.\n     * @notice Also mints redeems at a strike ratio to the deposited underlyings.\n     * Warning: Calls msg.sender with safeTransferFrom.\n     * @param optionToken The address of the option contract.\n     * @param mintQuantity Quantity of options to mint and underlyingToken to deposit.\n     * @param receiver The newly minted options and redeems are sent to the receiver address.\n     */\n    function safeMint(\n        IOption optionToken,\n        uint256 mintQuantity,\n        address receiver\n    ) external override nonReentrant returns (uint256, uint256) {\n        (uint256 outputOptions, uint256 outputRedeems) = TraderLib.safeMint(\n            optionToken,\n            mintQuantity,\n            receiver\n        );\n        emit TraderMint(\n            msg.sender,\n            address(optionToken),\n            outputOptions,\n            outputRedeems\n        );\n        return (outputOptions, outputRedeems);\n    }\n\n    /**\n     * @dev Swaps strikeTokens to underlyingTokens using the strike ratio as the exchange rate.\n     * @notice Burns optionTokens, option contract receives strikeTokens, user receives underlyingTokens.\n     * @param optionToken The address of the option contract.\n     * @param exerciseQuantity Quantity of optionTokens to exercise.\n     * @param receiver The underlyingTokens are sent to the receiver address.\n     */\n    function safeExercise(\n        IOption optionToken,\n        uint256 exerciseQuantity,\n        address receiver\n    ) external override nonReentrant returns (uint256, uint256) {\n        (uint256 inStrikes, uint256 inOptions) = TraderLib.safeExercise(\n            optionToken,\n            exerciseQuantity,\n            receiver\n        );\n        emit TraderExercise(\n            msg.sender,\n            address(optionToken),\n            exerciseQuantity,\n            inStrikes\n        );\n\n        return (inStrikes, inOptions);\n    }\n\n    /**\n     * @dev Burns redeemTokens to withdraw available strikeTokens.\n     * @notice inRedeems = outStrikes.\n     * @param optionToken The address of the option contract.\n     * @param redeemQuantity redeemQuantity of redeemTokens to burn.\n     * @param receiver The strikeTokens are sent to the receiver address.\n     */\n    function safeRedeem(\n        IOption optionToken,\n        uint256 redeemQuantity,\n        address receiver\n    ) external override nonReentrant returns (uint256) {\n        uint256 inRedeems = TraderLib.safeRedeem(\n            optionToken,\n            redeemQuantity,\n            receiver\n        );\n        emit TraderRedeem(msg.sender, address(optionToken), inRedeems);\n        return inRedeems;\n    }\n\n    /**\n     * @dev Burn optionTokens and redeemTokens to withdraw underlyingTokens.\n     * @notice The redeemTokens to burn is equal to the optionTokens * strike ratio.\n     * inOptions = inRedeems / strike ratio = outUnderlyings\n     * @param optionToken The address of the option contract.\n     * @param closeQuantity Quantity of optionTokens to burn.\n     * (Implictly will burn the strike ratio quantity of redeemTokens).\n     * @param receiver The underlyingTokens are sent to the receiver address.\n     */\n    function safeClose(\n        IOption optionToken,\n        uint256 closeQuantity,\n        address receiver\n    )\n        external\n        override\n        nonReentrant\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            uint256 inRedeems,\n            uint256 inOptions,\n            uint256 outUnderlyings\n        ) = TraderLib.safeClose(optionToken, closeQuantity, receiver);\n        emit TraderClose(msg.sender, address(optionToken), inOptions);\n        return (inRedeems, inOptions, outUnderlyings);\n    }\n\n    /**\n     * @dev Burn redeemTokens to withdraw underlyingTokens and strikeTokens from expired options.\n     * @param optionToken The address of the option contract.\n     * @param unwindQuantity Quantity of option tokens used to calculate the amount of redeem tokens to burn.\n     * @param receiver The underlyingTokens and redeemTokens are sent to the receiver address.\n     */\n    function safeUnwind(\n        IOption optionToken,\n        uint256 unwindQuantity,\n        address receiver\n    )\n        external\n        override\n        nonReentrant\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (\n            uint256 inRedeems,\n            uint256 inOptions,\n            uint256 outUnderlyings\n        ) = TraderLib.safeUnwind(optionToken, unwindQuantity, receiver);\n        emit TraderUnwind(msg.sender, address(optionToken), inOptions);\n        return (inRedeems, inOptions, outUnderlyings);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}