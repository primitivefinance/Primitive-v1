{
  "address": "0x7A36212D8B979965d9B99A68F9709eD14cf04e38",
  "abi": [],
  "transactionHash": "0xeeaae8f3f6da1eda5ed47fb3072a6921c93d3aa353509e06d605e4cf54748d3d",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0x7A36212D8B979965d9B99A68F9709eD14cf04e38",
    "transactionIndex": 3,
    "gasUsed": "2405677",
    "logsBloom": "0x
    "blockHash": "0x4689f2ee6e9ed4d8398524808e57620b9428b5d85ef79f8db5818a108750430b",
    "transactionHash": "0xeeaae8f3f6da1eda5ed47fb3072a6921c93d3aa353509e06d605e4cf54748d3d",
    "logs": [],
    "blockNumber": 23890298,
    "cumulativeGasUsed": "3092111",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e8df3bbc9cd68519fa878cebbe263f7f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{\"deployTemplate()\":{\"details\":\"Deploys a clone of the deployed Option.sol contract.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/option/libraries/OptionTemplateLib.sol\":\"OptionTemplateLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x0de74dfa6b37943c1b834cbd8fb7a8d052e5ff80c7adb33692102dd6cd2985e9\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x3211de52f707a62a356a34fdea9d6a7bed46402d5ce45f1891a16fe2132fbb47\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(bytes20(_data << 96));\\n    }\\n}\\n\",\"keccak256\":\"0x66d1ed2a353be8d2492833a185c53a8f1de8d8fa575a201e9825cf334d79659a\"},\"contracts/option/interfaces/IFlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IFlash {\\r\\n    function primitiveFlash(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7caaea0111eb7c370eb36f59936e916a7998ceb17dd5f754707e9435f1cec133\"},\"contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"contracts/option/interfaces/IRedeem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IRedeem is IERC20 {\\r\\n    function optionToken() external view returns (address);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function mint(address user, uint256 amount) external;\\r\\n\\r\\n    function burn(address user, uint256 amount) external;\\r\\n\\r\\n    function initialize(address _factory, address _optionToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6e70ad4936ffe65300a55942aed61e27b70abc284c17e32f1ac53782c8e7ec50\"},\"contracts/option/libraries/OptionTemplateLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport { Option } from \\\"../primitives/Option.sol\\\";\\n\\nlibrary OptionTemplateLib {\\n    // solhint-disable-next-line max-line-length\\n    bytes32\\n        private constant _OPTION_SALT = 0x56f3a99c8e36689645460020839ea1340cbbb2e507b7effe3f180a89db85dd87; // keccak(\\\"primitive-option\\\")\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function OPTION_SALT() internal pure returns (bytes32) {\\n        return _OPTION_SALT;\\n    }\\n\\n    /**\\n     * @dev Deploys a clone of the deployed Option.sol contract.\\n     */\\n    function deployTemplate() external returns (address implementationAddress) {\\n        bytes memory creationCode = type(Option).creationCode;\\n        implementationAddress = Create2.deploy(0, _OPTION_SALT, creationCode);\\n    }\\n}\\n\",\"keccak256\":\"0x3f82941e049fe2fb32871d25124ff53bb961771634ffb6821d43c3510d5afcac\"},\"contracts/option/primitives/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Modifies name, symbol, and decimals by deleting them. Implemented as constants in parent contract.\\n */\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        virtual\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    /* function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    } */\\n\\n    // ======= WARNING: ADDED FUNCTIONS =========\\n\\n    /* function _setupName(string memory name_) internal {\\n        _name = name_;\\n    }\\n\\n    function _setupSymbol(string memory symbol_) internal {\\n        _symbol = symbol_;\\n    } */\\n\\n    // ======= END ADDED FUNCTIONS =========\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x68706b9034a11e5d712983b80ece864d826e43b3f74580c6e1b59173e9adad36\"},\"contracts/option/primitives/Option.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Vanilla Option Token\\r\\n * @notice  This is a low-level contract that is designed to be interacted with by\\r\\n *          other sophisticated smart contracts which have important safety checks,\\r\\n *          and not by externally owned accounts.\\r\\n *          Incorrect usage through direct interaction from externally owned accounts\\r\\n *          can lead to the loss of funds.\\r\\n *          Use Primitive's Trader.sol contract to interact with this contract safely.\\r\\n * @author  Primitive\\r\\n */\\r\\n\\r\\nimport { IOption } from \\\"../interfaces/IOption.sol\\\";\\r\\nimport { IRedeem } from \\\"../interfaces/IRedeem.sol\\\";\\r\\nimport { IFlash } from \\\"../interfaces/IFlash.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport { ERC20 } from \\\"./ERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\ncontract Option is IOption, ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct OptionParameters {\\r\\n        address underlyingToken;\\r\\n        address strikeToken;\\r\\n        uint256 base;\\r\\n        uint256 quote;\\r\\n        uint256 expiry;\\r\\n    }\\r\\n\\r\\n    OptionParameters public optionParameters;\\r\\n\\r\\n    // solhint-disable-next-line const-name-snakecase\\r\\n    uint256 public override underlyingCache;\\r\\n    uint256 public override strikeCache;\\r\\n    address public override redeemToken;\\r\\n    address public override factory;\\r\\n    bool private _notEntered;\\r\\n\\r\\n    string public constant name = \\\"Primitive V1 Option\\\";\\r\\n    string public constant symbol = \\\"PRM\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    event Mint(address indexed from, uint256 outOptions, uint256 outRedeems);\\r\\n    event Exercise(\\r\\n        address indexed from,\\r\\n        uint256 outUnderlyings,\\r\\n        uint256 inStrikes\\r\\n    );\\r\\n    event Redeem(address indexed from, uint256 inRedeems);\\r\\n    event Close(address indexed from, uint256 outUnderlyings);\\r\\n    event UpdatedCacheBalances(uint256 underlyingCache, uint256 strikeCache);\\r\\n    event InitializedRedeem(\\r\\n        address indexed caller,\\r\\n        address indexed redeemToken\\r\\n    );\\r\\n\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    constructor() public {}\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the intial state for the contract. Only called immediately after deployment.\\r\\n     * @param underlyingToken The address of the underlying asset.\\r\\n     * @param strikeToken The address of the strike asset.\\r\\n     * @param base The quantity of underlying tokens per quote amount of strike tokens.\\r\\n     * @param quote The quantity of strike tokens per base amount of underlying tokens.\\r\\n     * @param expiry The expiration date for the option.\\r\\n     */\\r\\n    function initialize(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) public {\\r\\n        require(factory == address(0x0), \\\"ERR_IS_INITIALIZED\\\");\\r\\n        require(underlyingToken != strikeToken, \\\"ERR_SAME_ASSETS\\\");\\r\\n        require(base > 0, \\\"ERR_BASE_ZERO\\\");\\r\\n        require(quote > 0, \\\"ERR_QUOTE_ZERO\\\");\\r\\n        require(expiry >= block.timestamp, \\\"ERR_EXPIRY\\\");\\r\\n        factory = msg.sender;\\r\\n        optionParameters = OptionParameters(\\r\\n            underlyingToken,\\r\\n            strikeToken,\\r\\n            base,\\r\\n            quote,\\r\\n            expiry\\r\\n        );\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    modifier notExpired {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(isNotExpired(), \\\"ERR_EXPIRED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called after the option contract is initialized, and a redeem token has been deployed.\\r\\n     * @notice Entangles a redeem token to this option contract permanently.\\r\\n     * @param redeemToken_ The address of the redeem token.\\r\\n     */\\r\\n    function initRedeemToken(address redeemToken_) external override {\\r\\n        require(msg.sender == factory, \\\"ERR_NOT_OWNER\\\");\\r\\n        require(redeemToken == address(0x0), \\\"ERR_REDEEM_INITIALIZED\\\");\\r\\n        redeemToken = redeemToken_;\\r\\n        emit InitializedRedeem(msg.sender, redeemToken_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the cached balances to match the actual current balances.\\r\\n     * Attempting to transfer tokens to this contract directly, in a separate transaction,\\r\\n     * is incorrect and could result in loss of funds. Calling this function will permanently lock any excess\\r\\n     * underlying or strike tokens which were erroneously sent to this contract.\\r\\n     */\\r\\n    function updateCacheBalances() external override nonReentrant {\\r\\n        _updateCacheBalances(\\r\\n            IERC20(optionParameters.underlyingToken).balanceOf(address(this)),\\r\\n            IERC20(optionParameters.strikeToken).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the cache balances to new values.\\r\\n     */\\r\\n    function _updateCacheBalances(\\r\\n        uint256 underlyingBalance,\\r\\n        uint256 strikeBalance\\r\\n    ) private {\\r\\n        underlyingCache = underlyingBalance;\\r\\n        strikeCache = strikeBalance;\\r\\n        emit UpdatedCacheBalances(underlyingBalance, strikeBalance);\\r\\n    }\\r\\n\\r\\n    /* === STATE MUTABLE === */\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * Mints optionTokens at a 1:1 ratio to underlyingToken deposits. Also mints Redeem tokens at a base:quote ratio.\\r\\n     * @notice inUnderlyings = outOptionTokens. inUnderlying / strike ratio = outRedeemTokens.\\r\\n     * @param receiver The newly minted tokens are sent to the receiver address.\\r\\n     */\\r\\n    function mintOptions(address receiver)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        notExpired\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        // Save on gas because this variable is used twice.\\r\\n        uint256 underlyingBalance = IERC20(optionParameters.underlyingToken)\\r\\n            .balanceOf(address(this));\\r\\n\\r\\n        // Mint optionTokens equal to the difference between current and cached balance of underlyingTokens.\\r\\n        uint256 inUnderlyings = underlyingBalance.sub(underlyingCache);\\r\\n\\r\\n        // Calculate the quantity of redeemTokens to mint.\\r\\n        uint256 outRedeems = inUnderlyings.mul(optionParameters.quote).div(\\r\\n            optionParameters.base\\r\\n        );\\r\\n        require(outRedeems > 0, \\\"ERR_ZERO\\\");\\r\\n\\r\\n        // Mint the optionTokens and redeemTokens.\\r\\n        IRedeem(redeemToken).mint(receiver, outRedeems);\\r\\n        _mint(receiver, inUnderlyings);\\r\\n\\r\\n        // Update the underlyingCache.\\r\\n        _updateCacheBalances(underlyingBalance, strikeCache);\\r\\n        emit Mint(msg.sender, inUnderlyings, outRedeems);\\r\\n        return (inUnderlyings, outRedeems);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * Sends out underlyingTokens then checks to make sure they are returned or paid for.\\r\\n     * This function enables flash exercises and flash loans. Only smart contracts who implement\\r\\n     * their own IFlash interface should be calling this function to initiate a flash exercise/loan.\\r\\n     * @notice If the underlyingTokens are returned, only the fee has to be paid.\\r\\n     * @param receiver The outUnderlyings are sent to the receiver address.\\r\\n     * @param outUnderlyings Quantity of underlyingTokens to safeTransfer to receiver optimistically.\\r\\n     * @param data Passing in any abritrary data will trigger the flash exercise callback function.\\r\\n     */\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external override nonReentrant notExpired returns (uint256, uint256) {\\r\\n        // Store the cached balances and token addresses in memory.\\r\\n        address underlyingToken = optionParameters.underlyingToken;\\r\\n        //(uint256 _underlyingCache, uint256 _strikeCache) = getCacheBalances();\\r\\n\\r\\n        // Require outUnderlyings > 0 and balance of underlyings >= outUnderlyings.\\r\\n        require(outUnderlyings > 0, \\\"ERR_ZERO\\\");\\r\\n        require(\\r\\n            IERC20(underlyingToken).balanceOf(address(this)) >= outUnderlyings,\\r\\n            \\\"ERR_BAL_UNDERLYING\\\"\\r\\n        );\\r\\n\\r\\n        // Optimistically safeTransfer out underlyingTokens.\\r\\n        IERC20(underlyingToken).safeTransfer(receiver, outUnderlyings);\\r\\n        if (data.length > 0)\\r\\n            IFlash(receiver).primitiveFlash(msg.sender, outUnderlyings, data);\\r\\n\\r\\n        // Store in memory for gas savings.\\r\\n        uint256 strikeBalance = IERC20(optionParameters.strikeToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // Calculate the differences.\\r\\n        uint256 inStrikes = strikeBalance.sub(strikeCache);\\r\\n        uint256 inUnderlyings = underlyingBalance.sub(\\r\\n            underlyingCache.sub(outUnderlyings)\\r\\n        ); // will be > 0 if underlyingTokens are returned.\\r\\n\\r\\n        // Either underlyingTokens or strikeTokens must be sent into the contract.\\r\\n        require(inStrikes > 0 || inUnderlyings > 0, \\\"ERR_ZERO\\\");\\r\\n\\r\\n        // Calculate the remaining amount of underlyingToken that needs to be paid for.\\r\\n        uint256 remainder = inUnderlyings > outUnderlyings\\r\\n            ? 0\\r\\n            : outUnderlyings.sub(inUnderlyings);\\r\\n\\r\\n        // Calculate the expected payment of strikeTokens.\\r\\n        uint256 payment = remainder.mul(optionParameters.quote).div(\\r\\n            optionParameters.base\\r\\n        );\\r\\n\\r\\n        // Assumes the cached optionToken balance is 0, which is what it should be.\\r\\n        uint256 inOptions = balanceOf(address(this));\\r\\n\\r\\n        // Enforce the invariants.\\r\\n        require(inStrikes >= payment, \\\"ERR_STRIKES_INPUT\\\");\\r\\n        require(inOptions >= remainder, \\\"ERR_OPTIONS_INPUT\\\");\\r\\n\\r\\n        // Burn the optionTokens at a 1:1 ratio to outUnderlyings.\\r\\n        _burn(address(this), inOptions);\\r\\n\\r\\n        // Update the cached balances.\\r\\n        _updateCacheBalances(underlyingBalance, strikeBalance);\\r\\n        emit Exercise(msg.sender, outUnderlyings, inStrikes);\\r\\n        return (inStrikes, inOptions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * Burns redeemTokens to withdraw strikeTokens at a ratio of 1:1.\\r\\n     * @notice inRedeemTokens = outStrikeTokens. Only callable when strikeTokens are in the contract.\\r\\n     * @param receiver The inRedeems quantity of strikeTokens are sent to the receiver address.\\r\\n     */\\r\\n    function redeemStrikeTokens(address receiver)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        address strikeToken = optionParameters.strikeToken;\\r\\n        address _redeemToken = redeemToken;\\r\\n        uint256 strikeBalance = IERC20(strikeToken).balanceOf(address(this));\\r\\n        uint256 inRedeems = IERC20(_redeemToken).balanceOf(address(this));\\r\\n\\r\\n        // Difference between redeemTokens balance and cache.\\r\\n        require(inRedeems > 0, \\\"ERR_ZERO\\\");\\r\\n        require(strikeBalance >= inRedeems, \\\"ERR_BAL_STRIKE\\\");\\r\\n\\r\\n        // Burn redeemTokens in the contract. Send strikeTokens to receiver.\\r\\n        IRedeem(_redeemToken).burn(address(this), inRedeems);\\r\\n        IERC20(strikeToken).safeTransfer(receiver, inRedeems);\\r\\n\\r\\n        // Current balances.\\r\\n        strikeBalance = IERC20(strikeToken).balanceOf(address(this));\\r\\n\\r\\n        // Update the cached balances.\\r\\n        _updateCacheBalances(underlyingCache, strikeBalance);\\r\\n        emit Redeem(msg.sender, inRedeems);\\r\\n        return inRedeems;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * If the option has expired, burn redeem tokens to withdraw underlying tokens.\\r\\n     * If the option is not expired, burn option and redeem tokens to withdraw underlying tokens.\\r\\n     * @notice inRedeemTokens / strike ratio = outUnderlyingTokens && inOptionTokens >= outUnderlyingTokens.\\r\\n     * @param receiver The outUnderlyingTokens are sent to the receiver address.\\r\\n     */\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // Stores addresses and balances locally for gas savings.\\r\\n        address underlyingToken = optionParameters.underlyingToken;\\r\\n        address _redeemToken = redeemToken;\\r\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        uint256 optionBalance = balanceOf(address(this));\\r\\n        uint256 inRedeems = IERC20(_redeemToken).balanceOf(address(this));\\r\\n\\r\\n        // The quantity of underlyingToken to send out it still determined by the quantity of inRedeems.\\r\\n        // inRedeems is in units of strikeTokens, which is converted to underlyingTokens\\r\\n        // by multiplying inRedeems by the strike ratio, which is base / quote.\\r\\n        // This outUnderlyings quantity is checked against inOptions.\\r\\n        // inOptions must be greater than or equal to outUnderlyings (1 option burned per 1 underlying purchased).\\r\\n        // optionBalance must be greater than or equal to outUnderlyings.\\r\\n        // Neither inRedeems or inOptions can be zero.\\r\\n        uint256 outUnderlyings = inRedeems.mul(optionParameters.base).div(\\r\\n            optionParameters.quote\\r\\n        );\\r\\n\\r\\n        // Assumes the cached balance is 0 so inOptions = balance of optionToken.\\r\\n        // If optionToken is expired, optionToken does not need to be sent in. Only redeemToken.\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        uint256 inOptions = isNotExpired() ? optionBalance : outUnderlyings;\\r\\n        require(inRedeems > 0 && inOptions > 0, \\\"ERR_ZERO\\\");\\r\\n        require(\\r\\n            inOptions >= outUnderlyings && underlyingBalance >= outUnderlyings,\\r\\n            \\\"ERR_BAL_UNDERLYING\\\"\\r\\n        );\\r\\n\\r\\n        // Burn optionTokens. optionTokens are only sent into contract when not expired.\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        if (isNotExpired()) {\\r\\n            _burn(address(this), inOptions);\\r\\n        }\\r\\n\\r\\n        // Send underlyingTokens to user.\\r\\n        // Burn redeemTokens held in the contract.\\r\\n        // User does not receive extra underlyingTokens if there was extra optionTokens in the contract.\\r\\n        // User receives outUnderlyings proportional to inRedeems.\\r\\n        IRedeem(_redeemToken).burn(address(this), inRedeems);\\r\\n        IERC20(underlyingToken).safeTransfer(receiver, outUnderlyings);\\r\\n\\r\\n        // Current balances of underlyingToken and redeemToken.\\r\\n        underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\\r\\n\\r\\n        // Update the cached balances.\\r\\n        _updateCacheBalances(underlyingBalance, strikeCache);\\r\\n        emit Close(msg.sender, outUnderlyings);\\r\\n        return (inRedeems, inOptions, outUnderlyings);\\r\\n    }\\r\\n\\r\\n    /* === VIEW === */\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the previously saved balances of underlying and strike tokens.\\r\\n     */\\r\\n    function getCacheBalances()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        return (underlyingCache, strikeCache);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the underlying, strike, and redeem token addresses.\\r\\n     */\\r\\n    function getAssetAddresses()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            optionParameters.underlyingToken,\\r\\n            optionParameters.strikeToken,\\r\\n            redeemToken\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the strike token address.\\r\\n     */\\r\\n    function getStrikeTokenAddress() public override view returns (address) {\\r\\n        return optionParameters.strikeToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the underlying token address.\\r\\n     */\\r\\n    function getUnderlyingTokenAddress()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return optionParameters.underlyingToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the base value option parameter.\\r\\n     */\\r\\n    function getBaseValue() public override view returns (uint256) {\\r\\n        return optionParameters.base;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the quote value option parameter.\\r\\n     */\\r\\n    function getQuoteValue() public override view returns (uint256) {\\r\\n        return optionParameters.quote;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the expiry timestamp option parameter.\\r\\n     */\\r\\n    function getExpiryTime() public override view returns (uint256) {\\r\\n        return optionParameters.expiry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the option parameters and redeem token address.\\r\\n     */\\r\\n    function getParameters()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        )\\r\\n    {\\r\\n        OptionParameters memory _optionParameters = optionParameters;\\r\\n        _underlyingToken = _optionParameters.underlyingToken;\\r\\n        _strikeToken = _optionParameters.strikeToken;\\r\\n        _redeemToken = redeemToken;\\r\\n        _base = _optionParameters.base;\\r\\n        _quote = _optionParameters.quote;\\r\\n        _expiry = _optionParameters.expiry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to check if the option is expired.\\r\\n     */\\r\\n    function isNotExpired() internal view returns (bool) {\\r\\n        return optionParameters.expiry >= block.timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x25d1b63eb6a225b4b99113e08a6ba78eaf7ac6e92d087c15a440ebf7ab085989\"}},\"version\":1}",
  "bytecode": "0x612a8d610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80634b5e54881461003a575b600080fd5b81801561004657600080fd5b5061004f61006b565b604080516001600160a01b039092168252519081900360200190f35b600060606040518060200161007f906101df565b601f1982820381018352601f9091011660405290506100c060007f56f3a99c8e36689645460020839ea1340cbbb2e507b7effe3f180a89db85dd87836100c6565b91505090565b6000808447101561011e576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b8251610171576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f590506001600160a01b0381166101d7576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b61286b806101ed8339019056fe608060405234801561001057600080fd5b5061284b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c8063787eae301161010f578063a5ea11da116100a2578063c45a015511610071578063c45a01551461061e578063d13f90b414610626578063dd62ed3e14610668578063fa9ad7c414610696576101e4565b8063a5ea11da1461057a578063a9059cbb146105c4578063b43bb135146105f0578063b592a13814610616576101e4565b806395d89b41116100de57806395d89b41146104ff578063a1a4076114610507578063a457c2d71461050f578063a49b41d41461053b576101e4565b8063787eae30146103fb5780637a4fe38714610480578063834998051461048857806387685fb9146104cc576101e4565b806325cb5bc011610187578063440f5fd211610156578063440f5fd2146103865780634a9d10361461038e5780635e86929d146103af57806370a08231146103d5576101e4565b806325cb5bc0146103105780632f310bad14610318578063313ce5671461033c578063395093511461035a576101e4565b8063095ea7b3116101c3578063095ea7b31461028a57806318160ddd146102ca5780631f12b3f8146102d257806323b872dd146102da576101e4565b8062fe19fa146101e957806302a5fea21461020357806306fdde031461020d575b600080fd5b6101f16106bc565b60408051918252519081900360200190f35b61020b6106c2565b005b610215610825565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024f578181015183820152602001610237565b50505050905090810190601f16801561027c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102b6600480360360408110156102a057600080fd5b506001600160a01b038135169060200135610854565b604080519115158252519081900360200190f35b6101f1610872565b6101f1610878565b6102b6600480360360608110156102f057600080fd5b506001600160a01b0381358116916020810135909116906040013561087e565b6101f161090b565b610320610911565b604080516001600160a01b039092168252519081900360200190f35b610344610920565b6040805160ff9092168252519081900360200190f35b6102b66004803603604081101561037057600080fd5b506001600160a01b038135169060200135610925565b610320610979565b610396610988565b6040805192835260208301919091528051918290030190f35b6101f1600480360360208110156103c557600080fd5b50356001600160a01b0316610992565b6101f1600480360360208110156103eb57600080fd5b50356001600160a01b0316610cc0565b6103966004803603606081101561041157600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561044157600080fd5b82018360208201111561045357600080fd5b8035906020019184600183028401116401000000008311171561047557600080fd5b509092509050610cdb565b6101f161122e565b6104ae6004803603602081101561049e57600080fd5b50356001600160a01b0316611234565b60408051938452602084019290925282820152519081900360600190f35b6104d46115e9565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190f35b610215611606565b610320611625565b6102b66004803603604081101561052557600080fd5b506001600160a01b038135169060200135611634565b6105436116a2565b604080516001600160a01b039687168152949095166020850152838501929092526060830152608082015290519081900360a00190f35b6105826116c4565b604080516001600160a01b039788168152958716602087015293909516848401526060840191909152608083015260a082019290925290519081900360c00190f35b6102b6600480360360408110156105da57600080fd5b506001600160a01b038135169060200135611734565b61020b6004803603602081101561060657600080fd5b50356001600160a01b0316611748565b6101f161183a565b610320611840565b61020b600480360360a081101561063c57600080fd5b506001600160a01b0381358116916020810135909116906040810135906060810135906080013561184f565b6101f16004803603604081101561067e57600080fd5b506001600160a01b0381358116916020013516611a4b565b610396600480360360208110156106ac57600080fd5b50356001600160a01b0316611a76565b60065490565b600b54600160a01b900460ff1661070e576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055600354604080516370a0823160e01b81523060048201529051610810926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d602081101561079157600080fd5b505160048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d602081101561080957600080fd5b5051611ced565b600b805460ff60a01b1916600160a01b179055565b60405180604001604052806013815260200172283934b6b4ba34bb32902b189027b83a34b7b760691b81525081565b6000610868610861611d36565b8484611d3a565b5060015b92915050565b60025490565b60095481565b600061088b848484611e26565b61090184610897611d36565b6108fc85604051806060016040528060288152602001612735602891396001600160a01b038a166000908152600160205260408120906108d5611d36565b6001600160a01b03168152602081019190915260400160002054919063ffffffff611f8d16565b611d3a565b5060019392505050565b60075490565b600a546001600160a01b031681565b601281565b6000610868610932611d36565b846108fc8560016000610943611d36565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61202416565b6003546001600160a01b031690565b6008546009549091565b600b54600090600160a01b900460ff166109e1576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b1916905560048054600a54604080516370a0823160e01b81523094810194909452516001600160a01b0392831693929091169160009184916370a08231916024808301926020929190829003018186803b158015610a4757600080fd5b505afa158015610a5b573d6000803e3d6000fd5b505050506040513d6020811015610a7157600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d6020811015610ae957600080fd5b5051905080610b2a576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b80821015610b70576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f535452494b4560901b604482015290519081900360640190fd5b60408051632770a7eb60e21b81523060048201526024810183905290516001600160a01b03851691639dc29fac91604480830192600092919082900301818387803b158015610bbe57600080fd5b505af1158015610bd2573d6000803e3d6000fd5b50610beb925050506001600160a01b0385168783612085565b604080516370a0823160e01b815230600482015290516001600160a01b038616916370a08231916024808301926020929190829003018186803b158015610c3157600080fd5b505afa158015610c45573d6000803e3d6000fd5b505050506040513d6020811015610c5b57600080fd5b5051600854909250610c6d9083611ced565b60408051828152905133917f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6919081900360200190a29350505050600b805460ff60a01b1916600160a01b179055919050565b6001600160a01b031660009081526020819052604090205490565b600b546000908190600160a01b900460ff16610d2c576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055610d416120dc565b610d80576040805162461bcd60e51b815260206004820152600b60248201526a11549497d156141254915160aa1b604482015290519081900360640190fd5b6003546001600160a01b031685610dc9576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905187916001600160a01b038416916370a0823191602480820192602092909190829003018186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d6020811015610e3c57600080fd5b50511015610e86576040805162461bcd60e51b81526020600482015260126024820152714552525f42414c5f554e4445524c59494e4760701b604482015290519081900360640190fd5b610ea06001600160a01b038216888863ffffffff61208516565b8315610f4657604051636511d27560e01b8152336004820181815260248301899052606060448401908152606484018890526001600160a01b038b1693636511d27593928b928b928b929190608401848480828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b505050505b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d6020811015610fbf57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561100d57600080fd5b505afa158015611021573d6000803e3d6000fd5b505050506040513d602081101561103757600080fd5b505160095490915060009061105390849063ffffffff6120e516565b9050600061107c61106f8b6008546120e590919063ffffffff16565b849063ffffffff6120e516565b9050600082118061108d5750600081115b6110c9576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b60008a82116110e7576110e28b8363ffffffff6120e516565b6110ea565b60005b600554600654919250600091611118919061110c90859063ffffffff61212716565b9063ffffffff61218016565b9050600061112530610cc0565b905081851015611170576040805162461bcd60e51b815260206004820152601160248201527011549497d4d5149252d154d7d253941555607a1b604482015290519081900360640190fd5b828110156111b9576040805162461bcd60e51b815260206004820152601160248201527011549497d3d4151253d394d7d253941555607a1b604482015290519081900360640190fd5b6111c330826121c2565b6111cd8688611ced565b604080518e815260208101879052815133927f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d928290030190a2600b805460ff60a01b1916600160a01b179055939d939c50929a5050505050505050505050565b60085481565b6000806000600b60149054906101000a900460ff16611288576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055600354600a54604080516370a0823160e01b815230600482015290516001600160a01b03938416939092169160009184916370a0823191602480820192602092909190829003018186803b1580156112ec57600080fd5b505afa158015611300573d6000803e3d6000fd5b505050506040513d602081101561131657600080fd5b50519050600061132530610cc0565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038616916370a08231916024808301926020929190829003018186803b15801561137157600080fd5b505afa158015611385573d6000803e3d6000fd5b505050506040513d602081101561139b57600080fd5b50516006546005549192506000916113bf919061110c90859063ffffffff61212716565b905060006113cb6120dc565b6113d557816113d7565b835b90506000831180156113e95750600081115b611425576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b8181101580156114355750818510155b61147b576040805162461bcd60e51b81526020600482015260126024820152714552525f42414c5f554e4445524c59494e4760701b604482015290519081900360640190fd5b6114836120dc565b156114925761149230826121c2565b60408051632770a7eb60e21b81523060048201526024810185905290516001600160a01b03881691639dc29fac91604480830192600092919082900301818387803b1580156114e057600080fd5b505af11580156114f4573d6000803e3d6000fd5b5061150d925050506001600160a01b0388168c84612085565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561155357600080fd5b505afa158015611567573d6000803e3d6000fd5b505050506040513d602081101561157d57600080fd5b5051600954909550611590908690611ced565b60408051838152905133917f684222b0069d4a2e5e0d986611cc5182d543904c4e4264bf770d4e51faefc822919081900360200190a2600b805460ff60a01b1916600160a01b179055919a919950975095505050505050565b600354600454600a546001600160a01b0392831693918316921690565b6040518060400160405280600381526020016250524d60e81b81525081565b6004546001600160a01b031690565b6000610868611641611d36565b846108fc856040518060600160405280602581526020016127f1602591396001600061166b611d36565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff611f8d16565b6003546004546005546006546007546001600160a01b03948516949093169285565b6000806000806000806116d5612625565b50506040805160a0810182526003546001600160a01b03908116808352600454821660208401819052600554948401859052600654606085018190526007546080909501859052600a54929b919a509190921697509295509193509150565b6000610868611741611d36565b8484611e26565b600b546001600160a01b03163314611797576040805162461bcd60e51b815260206004820152600d60248201526c22a9292fa727aa2fa7aba722a960991b604482015290519081900360640190fd5b600a546001600160a01b0316156117ee576040805162461bcd60e51b815260206004820152601660248201527511549497d4915111515357d25392551250531256915160521b604482015290519081900360640190fd5b600a80546001600160a01b0319166001600160a01b03831690811790915560405133907f89d82022efb79096928f354aadac8912185187b551963720c3cf4db45f2b3fea90600090a350565b60055490565b600b546001600160a01b031681565b600b546001600160a01b0316156118a2576040805162461bcd60e51b815260206004820152601260248201527111549497d254d7d25392551250531256915160721b604482015290519081900360640190fd5b836001600160a01b0316856001600160a01b031614156118fb576040805162461bcd60e51b815260206004820152600f60248201526e4552525f53414d455f41535345545360881b604482015290519081900360640190fd5b60008311611940576040805162461bcd60e51b815260206004820152600d60248201526c4552525f424153455f5a45524f60981b604482015290519081900360640190fd5b60008211611986576040805162461bcd60e51b815260206004820152600e60248201526d4552525f51554f54455f5a45524f60901b604482015290519081900360640190fd5b428110156119c8576040805162461bcd60e51b815260206004820152600a6024820152694552525f45585049525960b01b604482015290519081900360640190fd5b600b80546040805160a0810182526001600160a01b039889168082529790981660208901819052908801869052606088018590526080909701839052600380546001600160a01b0319908116909717905560048054871690971790965560059390935560069190915560075560ff60a01b1991909216331716600160a01b179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600b546000908190600160a01b900460ff16611ac7576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055611adc6120dc565b611b1b576040805162461bcd60e51b815260206004820152600b60248201526a11549497d156141254915160aa1b604482015290519081900360640190fd5b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611b6657600080fd5b505afa158015611b7a573d6000803e3d6000fd5b505050506040513d6020811015611b9057600080fd5b5051600854909150600090611bac90839063ffffffff6120e516565b600554600654919250600091611bce919061110c90859063ffffffff61212716565b905060008111611c10576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b600a54604080516340c10f1960e01b81526001600160a01b03898116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b50505050611c8786836122ca565b611c9383600954611ced565b6040805183815260208101839052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a2909350915050600b805460ff60a01b1916600160a01b1790559092909150565b60088290556009819055604080518381526020810183905281517f5a1c3e4cdfd0698a8d6ff240a75a16c8b2f07d2b7579bb89c8065077eda06d5f929181900390910190a15050565b3390565b6001600160a01b038316611d7f5760405162461bcd60e51b81526004018080602001828103825260248152602001806127a36024913960400191505060405180910390fd5b6001600160a01b038216611dc45760405162461bcd60e51b81526004018080602001828103825260228152602001806126cc6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316611e6b5760405162461bcd60e51b815260040180806020018281038252602581526020018061277e6025913960400191505060405180910390fd5b6001600160a01b038216611eb05760405162461bcd60e51b81526004018080602001828103825260238152602001806126676023913960400191505060405180910390fd5b611ebb8383836120d7565b611efe816040518060600160405280602681526020016126ee602691396001600160a01b038616600090815260208190526040902054919063ffffffff611f8d16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611f33908263ffffffff61202416565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561201c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fe1578181015183820152602001611fc9565b50505050905090810190601f16801561200e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561207e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526120d79084906123c6565b505050565b60075442111590565b600061207e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f8d565b6000826121365750600061086c565b8282028284828161214357fe5b041461207e5760405162461bcd60e51b81526004018080602001828103825260218152602001806127146021913960400191505060405180910390fd5b600061207e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612584565b6001600160a01b0382166122075760405162461bcd60e51b815260040180806020018281038252602181526020018061275d6021913960400191505060405180910390fd5b612213826000836120d7565b612256816040518060600160405280602281526020016126aa602291396001600160a01b038516600090815260208190526040902054919063ffffffff611f8d16565b6001600160a01b038316600090815260208190526040902055600254612282908263ffffffff6120e516565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216612325576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b612331600083836120d7565b600254612344908263ffffffff61202416565b6002556001600160a01b038216600090815260208190526040902054612370908263ffffffff61202416565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6123d8826001600160a01b03166125e9565b612429576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106124675780518252601f199092019160209182019101612448565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146124c9576040519150601f19603f3d011682016040523d82523d6000602084013e6124ce565b606091505b509150915081612525576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561257e5780806020019051602081101561254157600080fd5b505161257e5760405162461bcd60e51b815260040180806020018281038252602a8152602001806127c7602a913960400191505060405180910390fd5b50505050565b600081836125d35760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611fe1578181015183820152602001611fc9565b5060008385816125df57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061261d57508115155b949350505050565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152509056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573735265656e7472616e637947756172643a207265656e7472616e742063616c6c0045524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220638a9ca5898aa439b5db1e20f4d772fb5c7c7d607553de8c33d6a4b9532d60dd64736f6c63430006020033a2646970667358221220045613582a488c7a97d18e0cf950a16fa3b30b2f75703d050f634e25e4ce032664736f6c63430006020033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80634b5e54881461003a575b600080fd5b81801561004657600080fd5b5061004f61006b565b604080516001600160a01b039092168252519081900360200190f35b600060606040518060200161007f906101df565b601f1982820381018352601f9091011660405290506100c060007f56f3a99c8e36689645460020839ea1340cbbb2e507b7effe3f180a89db85dd87836100c6565b91505090565b6000808447101561011e576040805162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b8251610171576040805162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015290519081900360640190fd5b8383516020850187f590506001600160a01b0381166101d7576040805162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015290519081900360640190fd5b949350505050565b61286b806101ed8339019056fe608060405234801561001057600080fd5b5061284b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c8063787eae301161010f578063a5ea11da116100a2578063c45a015511610071578063c45a01551461061e578063d13f90b414610626578063dd62ed3e14610668578063fa9ad7c414610696576101e4565b8063a5ea11da1461057a578063a9059cbb146105c4578063b43bb135146105f0578063b592a13814610616576101e4565b806395d89b41116100de57806395d89b41146104ff578063a1a4076114610507578063a457c2d71461050f578063a49b41d41461053b576101e4565b8063787eae30146103fb5780637a4fe38714610480578063834998051461048857806387685fb9146104cc576101e4565b806325cb5bc011610187578063440f5fd211610156578063440f5fd2146103865780634a9d10361461038e5780635e86929d146103af57806370a08231146103d5576101e4565b806325cb5bc0146103105780632f310bad14610318578063313ce5671461033c578063395093511461035a576101e4565b8063095ea7b3116101c3578063095ea7b31461028a57806318160ddd146102ca5780631f12b3f8146102d257806323b872dd146102da576101e4565b8062fe19fa146101e957806302a5fea21461020357806306fdde031461020d575b600080fd5b6101f16106bc565b60408051918252519081900360200190f35b61020b6106c2565b005b610215610825565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024f578181015183820152602001610237565b50505050905090810190601f16801561027c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102b6600480360360408110156102a057600080fd5b506001600160a01b038135169060200135610854565b604080519115158252519081900360200190f35b6101f1610872565b6101f1610878565b6102b6600480360360608110156102f057600080fd5b506001600160a01b0381358116916020810135909116906040013561087e565b6101f161090b565b610320610911565b604080516001600160a01b039092168252519081900360200190f35b610344610920565b6040805160ff9092168252519081900360200190f35b6102b66004803603604081101561037057600080fd5b506001600160a01b038135169060200135610925565b610320610979565b610396610988565b6040805192835260208301919091528051918290030190f35b6101f1600480360360208110156103c557600080fd5b50356001600160a01b0316610992565b6101f1600480360360208110156103eb57600080fd5b50356001600160a01b0316610cc0565b6103966004803603606081101561041157600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561044157600080fd5b82018360208201111561045357600080fd5b8035906020019184600183028401116401000000008311171561047557600080fd5b509092509050610cdb565b6101f161122e565b6104ae6004803603602081101561049e57600080fd5b50356001600160a01b0316611234565b60408051938452602084019290925282820152519081900360600190f35b6104d46115e9565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190f35b610215611606565b610320611625565b6102b66004803603604081101561052557600080fd5b506001600160a01b038135169060200135611634565b6105436116a2565b604080516001600160a01b039687168152949095166020850152838501929092526060830152608082015290519081900360a00190f35b6105826116c4565b604080516001600160a01b039788168152958716602087015293909516848401526060840191909152608083015260a082019290925290519081900360c00190f35b6102b6600480360360408110156105da57600080fd5b506001600160a01b038135169060200135611734565b61020b6004803603602081101561060657600080fd5b50356001600160a01b0316611748565b6101f161183a565b610320611840565b61020b600480360360a081101561063c57600080fd5b506001600160a01b0381358116916020810135909116906040810135906060810135906080013561184f565b6101f16004803603604081101561067e57600080fd5b506001600160a01b0381358116916020013516611a4b565b610396600480360360208110156106ac57600080fd5b50356001600160a01b0316611a76565b60065490565b600b54600160a01b900460ff1661070e576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055600354604080516370a0823160e01b81523060048201529051610810926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d602081101561079157600080fd5b505160048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d602081101561080957600080fd5b5051611ced565b600b805460ff60a01b1916600160a01b179055565b60405180604001604052806013815260200172283934b6b4ba34bb32902b189027b83a34b7b760691b81525081565b6000610868610861611d36565b8484611d3a565b5060015b92915050565b60025490565b60095481565b600061088b848484611e26565b61090184610897611d36565b6108fc85604051806060016040528060288152602001612735602891396001600160a01b038a166000908152600160205260408120906108d5611d36565b6001600160a01b03168152602081019190915260400160002054919063ffffffff611f8d16565b611d3a565b5060019392505050565b60075490565b600a546001600160a01b031681565b601281565b6000610868610932611d36565b846108fc8560016000610943611d36565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61202416565b6003546001600160a01b031690565b6008546009549091565b600b54600090600160a01b900460ff166109e1576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b1916905560048054600a54604080516370a0823160e01b81523094810194909452516001600160a01b0392831693929091169160009184916370a08231916024808301926020929190829003018186803b158015610a4757600080fd5b505afa158015610a5b573d6000803e3d6000fd5b505050506040513d6020811015610a7157600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d6020811015610ae957600080fd5b5051905080610b2a576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b80821015610b70576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f535452494b4560901b604482015290519081900360640190fd5b60408051632770a7eb60e21b81523060048201526024810183905290516001600160a01b03851691639dc29fac91604480830192600092919082900301818387803b158015610bbe57600080fd5b505af1158015610bd2573d6000803e3d6000fd5b50610beb925050506001600160a01b0385168783612085565b604080516370a0823160e01b815230600482015290516001600160a01b038616916370a08231916024808301926020929190829003018186803b158015610c3157600080fd5b505afa158015610c45573d6000803e3d6000fd5b505050506040513d6020811015610c5b57600080fd5b5051600854909250610c6d9083611ced565b60408051828152905133917f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6919081900360200190a29350505050600b805460ff60a01b1916600160a01b179055919050565b6001600160a01b031660009081526020819052604090205490565b600b546000908190600160a01b900460ff16610d2c576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055610d416120dc565b610d80576040805162461bcd60e51b815260206004820152600b60248201526a11549497d156141254915160aa1b604482015290519081900360640190fd5b6003546001600160a01b031685610dc9576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b604080516370a0823160e01b8152306004820152905187916001600160a01b038416916370a0823191602480820192602092909190829003018186803b158015610e1257600080fd5b505afa158015610e26573d6000803e3d6000fd5b505050506040513d6020811015610e3c57600080fd5b50511015610e86576040805162461bcd60e51b81526020600482015260126024820152714552525f42414c5f554e4445524c59494e4760701b604482015290519081900360640190fd5b610ea06001600160a01b038216888863ffffffff61208516565b8315610f4657604051636511d27560e01b8152336004820181815260248301899052606060448401908152606484018890526001600160a01b038b1693636511d27593928b928b928b929190608401848480828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b505050505b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d6020811015610fbf57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561100d57600080fd5b505afa158015611021573d6000803e3d6000fd5b505050506040513d602081101561103757600080fd5b505160095490915060009061105390849063ffffffff6120e516565b9050600061107c61106f8b6008546120e590919063ffffffff16565b849063ffffffff6120e516565b9050600082118061108d5750600081115b6110c9576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b60008a82116110e7576110e28b8363ffffffff6120e516565b6110ea565b60005b600554600654919250600091611118919061110c90859063ffffffff61212716565b9063ffffffff61218016565b9050600061112530610cc0565b905081851015611170576040805162461bcd60e51b815260206004820152601160248201527011549497d4d5149252d154d7d253941555607a1b604482015290519081900360640190fd5b828110156111b9576040805162461bcd60e51b815260206004820152601160248201527011549497d3d4151253d394d7d253941555607a1b604482015290519081900360640190fd5b6111c330826121c2565b6111cd8688611ced565b604080518e815260208101879052815133927f7fb8af33a94ca7bd709d59757a015eb48270f350724a5409fd77b579d0b7247d928290030190a2600b805460ff60a01b1916600160a01b179055939d939c50929a5050505050505050505050565b60085481565b6000806000600b60149054906101000a900460ff16611288576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055600354600a54604080516370a0823160e01b815230600482015290516001600160a01b03938416939092169160009184916370a0823191602480820192602092909190829003018186803b1580156112ec57600080fd5b505afa158015611300573d6000803e3d6000fd5b505050506040513d602081101561131657600080fd5b50519050600061132530610cc0565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038616916370a08231916024808301926020929190829003018186803b15801561137157600080fd5b505afa158015611385573d6000803e3d6000fd5b505050506040513d602081101561139b57600080fd5b50516006546005549192506000916113bf919061110c90859063ffffffff61212716565b905060006113cb6120dc565b6113d557816113d7565b835b90506000831180156113e95750600081115b611425576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b8181101580156114355750818510155b61147b576040805162461bcd60e51b81526020600482015260126024820152714552525f42414c5f554e4445524c59494e4760701b604482015290519081900360640190fd5b6114836120dc565b156114925761149230826121c2565b60408051632770a7eb60e21b81523060048201526024810185905290516001600160a01b03881691639dc29fac91604480830192600092919082900301818387803b1580156114e057600080fd5b505af11580156114f4573d6000803e3d6000fd5b5061150d925050506001600160a01b0388168c84612085565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561155357600080fd5b505afa158015611567573d6000803e3d6000fd5b505050506040513d602081101561157d57600080fd5b5051600954909550611590908690611ced565b60408051838152905133917f684222b0069d4a2e5e0d986611cc5182d543904c4e4264bf770d4e51faefc822919081900360200190a2600b805460ff60a01b1916600160a01b179055919a919950975095505050505050565b600354600454600a546001600160a01b0392831693918316921690565b6040518060400160405280600381526020016250524d60e81b81525081565b6004546001600160a01b031690565b6000610868611641611d36565b846108fc856040518060600160405280602581526020016127f1602591396001600061166b611d36565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff611f8d16565b6003546004546005546006546007546001600160a01b03948516949093169285565b6000806000806000806116d5612625565b50506040805160a0810182526003546001600160a01b03908116808352600454821660208401819052600554948401859052600654606085018190526007546080909501859052600a54929b919a509190921697509295509193509150565b6000610868611741611d36565b8484611e26565b600b546001600160a01b03163314611797576040805162461bcd60e51b815260206004820152600d60248201526c22a9292fa727aa2fa7aba722a960991b604482015290519081900360640190fd5b600a546001600160a01b0316156117ee576040805162461bcd60e51b815260206004820152601660248201527511549497d4915111515357d25392551250531256915160521b604482015290519081900360640190fd5b600a80546001600160a01b0319166001600160a01b03831690811790915560405133907f89d82022efb79096928f354aadac8912185187b551963720c3cf4db45f2b3fea90600090a350565b60055490565b600b546001600160a01b031681565b600b546001600160a01b0316156118a2576040805162461bcd60e51b815260206004820152601260248201527111549497d254d7d25392551250531256915160721b604482015290519081900360640190fd5b836001600160a01b0316856001600160a01b031614156118fb576040805162461bcd60e51b815260206004820152600f60248201526e4552525f53414d455f41535345545360881b604482015290519081900360640190fd5b60008311611940576040805162461bcd60e51b815260206004820152600d60248201526c4552525f424153455f5a45524f60981b604482015290519081900360640190fd5b60008211611986576040805162461bcd60e51b815260206004820152600e60248201526d4552525f51554f54455f5a45524f60901b604482015290519081900360640190fd5b428110156119c8576040805162461bcd60e51b815260206004820152600a6024820152694552525f45585049525960b01b604482015290519081900360640190fd5b600b80546040805160a0810182526001600160a01b039889168082529790981660208901819052908801869052606088018590526080909701839052600380546001600160a01b0319908116909717905560048054871690971790965560059390935560069190915560075560ff60a01b1991909216331716600160a01b179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600b546000908190600160a01b900460ff16611ac7576040805162461bcd60e51b815260206004820152601f602482015260008051602061268a833981519152604482015290519081900360640190fd5b600b805460ff60a01b19169055611adc6120dc565b611b1b576040805162461bcd60e51b815260206004820152600b60248201526a11549497d156141254915160aa1b604482015290519081900360640190fd5b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611b6657600080fd5b505afa158015611b7a573d6000803e3d6000fd5b505050506040513d6020811015611b9057600080fd5b5051600854909150600090611bac90839063ffffffff6120e516565b600554600654919250600091611bce919061110c90859063ffffffff61212716565b905060008111611c10576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b600a54604080516340c10f1960e01b81526001600160a01b03898116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015611c6557600080fd5b505af1158015611c79573d6000803e3d6000fd5b50505050611c8786836122ca565b611c9383600954611ced565b6040805183815260208101839052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a2909350915050600b805460ff60a01b1916600160a01b1790559092909150565b60088290556009819055604080518381526020810183905281517f5a1c3e4cdfd0698a8d6ff240a75a16c8b2f07d2b7579bb89c8065077eda06d5f929181900390910190a15050565b3390565b6001600160a01b038316611d7f5760405162461bcd60e51b81526004018080602001828103825260248152602001806127a36024913960400191505060405180910390fd5b6001600160a01b038216611dc45760405162461bcd60e51b81526004018080602001828103825260228152602001806126cc6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316611e6b5760405162461bcd60e51b815260040180806020018281038252602581526020018061277e6025913960400191505060405180910390fd5b6001600160a01b038216611eb05760405162461bcd60e51b81526004018080602001828103825260238152602001806126676023913960400191505060405180910390fd5b611ebb8383836120d7565b611efe816040518060600160405280602681526020016126ee602691396001600160a01b038616600090815260208190526040902054919063ffffffff611f8d16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611f33908263ffffffff61202416565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561201c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fe1578181015183820152602001611fc9565b50505050905090810190601f16801561200e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008282018381101561207e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526120d79084906123c6565b505050565b60075442111590565b600061207e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f8d565b6000826121365750600061086c565b8282028284828161214357fe5b041461207e5760405162461bcd60e51b81526004018080602001828103825260218152602001806127146021913960400191505060405180910390fd5b600061207e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612584565b6001600160a01b0382166122075760405162461bcd60e51b815260040180806020018281038252602181526020018061275d6021913960400191505060405180910390fd5b612213826000836120d7565b612256816040518060600160405280602281526020016126aa602291396001600160a01b038516600090815260208190526040902054919063ffffffff611f8d16565b6001600160a01b038316600090815260208190526040902055600254612282908263ffffffff6120e516565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216612325576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b612331600083836120d7565b600254612344908263ffffffff61202416565b6002556001600160a01b038216600090815260208190526040902054612370908263ffffffff61202416565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6123d8826001600160a01b03166125e9565b612429576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106124675780518252601f199092019160209182019101612448565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146124c9576040519150601f19603f3d011682016040523d82523d6000602084013e6124ce565b606091505b509150915081612525576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561257e5780806020019051602081101561254157600080fd5b505161257e5760405162461bcd60e51b815260040180806020018281038252602a8152602001806127c7602a913960400191505060405180910390fd5b50505050565b600081836125d35760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611fe1578181015183820152602001611fc9565b5060008385816125df57fe5b0495945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061261d57508115155b949350505050565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152509056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573735265656e7472616e637947756172643a207265656e7472616e742063616c6c0045524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220638a9ca5898aa439b5db1e20f4d772fb5c7c7d607553de8c33d6a4b9532d60dd64736f6c63430006020033a2646970667358221220045613582a488c7a97d18e0cf950a16fa3b30b2f75703d050f634e25e4ce032664736f6c63430006020033",
  "devdoc": {
    "methods": {
      "deployTemplate()": {
        "details": "Deploys a clone of the deployed Option.sol contract."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}