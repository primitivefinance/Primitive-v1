{
  "address": "0x76582d77C4e9e14e5A95429E9C18C3780eaB38fB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemAddress",
          "type": "address"
        }
      ],
      "name": "DeployedOptionClone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "UnverifiedExpiry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnverifiedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "optionFactory_",
          "type": "address"
        }
      ],
      "name": "UpdatedOptionFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemFactory_",
          "type": "address"
        }
      ],
      "name": "UpdatedRedeemFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "VerifiedExpiry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "VerifiedToken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allOptionClones",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strikeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "calculateOptionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strikeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "deployOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOptionClonesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strikeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "getOptionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "isVerifiedExpiry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        }
      ],
      "name": "isVerifiedOption",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "isVerifiedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseDeployments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionFactory_",
          "type": "address"
        }
      ],
      "name": "setOptionFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "redeemFactory_",
          "type": "address"
        }
      ],
      "name": "setRedeemFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseDeployments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "unverifyExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "unverifyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "verifyExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "verifyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07bbb72c578604e56dbca787dfe693652724cb92bba08b4b5aba986e4d6adb35",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0x76582d77C4e9e14e5A95429E9C18C3780eaB38fB",
    "transactionIndex": 3,
    "gasUsed": "1201993",
    "logsBloom": "0x
    "blockHash": "0x61bcfc33b68702e610f236c587ad9a73bfd931ed2efb085741221163495a8b70",
    "transactionHash": "0x07bbb72c578604e56dbca787dfe693652724cb92bba08b4b5aba986e4d6adb35",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 23890301,
        "transactionHash": "0x07bbb72c578604e56dbca787dfe693652724cb92bba08b4b5aba986e4d6adb35",
        "address": "0x76582d77C4e9e14e5A95429E9C18C3780eaB38fB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x61bcfc33b68702e610f236c587ad9a73bfd931ed2efb085741221163495a8b70"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23890301,
        "transactionHash": "0x07bbb72c578604e56dbca787dfe693652724cb92bba08b4b5aba986e4d6adb35",
        "address": "0x76582d77C4e9e14e5A95429E9C18C3780eaB38fB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x61bcfc33b68702e610f236c587ad9a73bfd931ed2efb085741221163495a8b70"
      }
    ],
    "blockNumber": 23890301,
    "cumulativeGasUsed": "1436893",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e8df3bbc9cd68519fa878cebbe263f7f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemAddress\",\"type\":\"address\"}],\"name\":\"DeployedOptionClone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"UnverifiedExpiry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnverifiedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"optionFactory_\",\"type\":\"address\"}],\"name\":\"UpdatedOptionFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemFactory_\",\"type\":\"address\"}],\"name\":\"UpdatedRedeemFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VerifiedExpiry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"VerifiedToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOptionClones\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateOptionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"deployOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOptionClonesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"getOptionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"isVerifiedExpiry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"}],\"name\":\"isVerifiedOption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isVerifiedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDeployments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionFactory_\",\"type\":\"address\"}],\"name\":\"setOptionFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemFactory_\",\"type\":\"address\"}],\"name\":\"setRedeemFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDeployments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"unverifyExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"unverifyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"verifyExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"verifyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"calculateOptionAddress(address,address,uint256,uint256,uint256)\":{\"details\":\"Calculates the option address deployed with create2 using the parameter arguments.\",\"params\":{\"base\":\"The quantity of underlying tokens per unit of quote amount of strike tokens.\",\"expiry\":\"The unix timestamp of the option's expiration date.\",\"quote\":\"The quantity of strike tokens per unit of base amount of underlying tokens.\",\"strikeToken\":\"The address of the ERC-20 strike token.\",\"underlyingToken\":\"The address of the ERC-20 underlying token.\"},\"returns\":{\"_0\":\"The address of the option with the parameter arguments.\"}},\"deployOption(address,address,uint256,uint256,uint256)\":{\"details\":\"Deploys an option contract clone with create2.\",\"params\":{\"base\":\"The quantity of underlying tokens per unit of quote amount of strike tokens.\",\"expiry\":\"The unix timestamp of the option's expiration date.\",\"quote\":\"The quantity of strike tokens per unit of base amount of underlying tokens.\",\"strikeToken\":\"The address of the ERC-20 strike token.\",\"underlyingToken\":\"The address of the ERC-20 underlying token.\"},\"returns\":{\"_0\":\"The address of the deployed option clone.\"}},\"getAllOptionClonesLength()\":{\"details\":\"Returns the length of the allOptionClones address array.\"},\"getOptionAddress(address,address,uint256,uint256,uint256)\":{\"details\":\"Gets the option address and returns address zero if not yet deployed.\",\"params\":{\"base\":\"The quantity of underlying tokens per unit of quote amount of strike tokens.\",\"expiry\":\"The unix timestamp of the option's expiration date.\",\"quote\":\"The quantity of strike tokens per unit of base amount of underlying tokens.\",\"strikeToken\":\"The address of the ERC-20 strike token.\",\"underlyingToken\":\"The address of the ERC-20 underlying token.\"},\"returns\":{\"_0\":\"The address of the option with the parameter arguments.\"}},\"isVerifiedExpiry(uint256)\":{\"details\":\"Checks the verifiedExpiries private mapping and returns verification status of token.\",\"returns\":{\"_0\":\"bool Verified or not verified.\"}},\"isVerifiedOption(address)\":{\"details\":\"Checks an option address to see if it has verified assets and expiry time.\",\"params\":{\"optionAddress\":\"The address of the option token.\"},\"returns\":{\"_0\":\"bool If the option has verified underlying and strike tokens, and expiry time.\"}},\"isVerifiedToken(address)\":{\"details\":\"Checks the verifiedTokens private mapping and returns verification status of token.\",\"returns\":{\"_0\":\"bool Verified or not verified.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseDeployments()\":{\"details\":\"Pauses the deployOption function.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOptionFactory(address)\":{\"details\":\"Sets the option factory contract to use for deploying clones.\",\"params\":{\"optionFactory_\":\"The address of the option factory.\"}},\"setRedeemFactory(address)\":{\"details\":\"Sets the redeem factory contract to use for deploying clones.\",\"params\":{\"redeemFactory_\":\"The address of the redeem factory.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpauseDeployments()\":{\"details\":\"Unpauses the deployOption function.\"},\"unverifyExpiry(uint256)\":{\"details\":\"Sets an expiry timestamp's verification status to false.\"},\"unverifyToken(address)\":{\"details\":\"Sets a verified token's verification status to false.\"},\"verifyExpiry(uint256)\":{\"details\":\"Sets an expiry timestamp's verification status to true.\"},\"verifyToken(address)\":{\"details\":\"Sets an ERC-20 token verification status to true.\"}}},\"userdoc\":{\"methods\":{\"getOptionAddress(address,address,uint256,uint256,uint256)\":{\"notice\":\"Will calculate the option address using the parameter arguments.        Checks the code size of the address to see if the contract has been deployed yet.        If contract has not been deployed, returns address zero.\"},\"unverifyExpiry(uint256)\":{\"notice\":\"A mapping of standardized, \\\"verified\\\", timestamps for the options.\"},\"verifyExpiry(uint256)\":{\"notice\":\"A mapping of standardized, \\\"verified\\\", timestamps for the options.\"},\"verifyToken(address)\":{\"notice\":\"A \\\"verified\\\" token is a standard ERC-20 token that we have tested with the option contract.        An example of an \\\"unverified\\\" token is a non-standard ERC-20 token which has not been tested.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/option/applications/Registry.sol\":\"Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x0de74dfa6b37943c1b834cbd8fb7a8d052e5ff80c7adb33692102dd6cd2985e9\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x9a8c691b81a4a48adbbd5b010faa56a168c189e711495c16347d93b60b805f82\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x3211de52f707a62a356a34fdea9d6a7bed46402d5ce45f1891a16fe2132fbb47\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0336d64bd695c5d8bb962fd3dacb3d26f52879b19e75472d7dea9f91f7add79a\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0x5cc574fb09fe4a5f96228ee3af85d268aae6e0b91fc0f2f90b08e9b207bfefd5\"},\"contracts/option/applications/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title Protocol Registry Contract for Deployed Options.\\r\\n * @author Primitive\\r\\n */\\r\\n\\r\\nimport { IOption } from \\\"../interfaces/IOption.sol\\\";\\r\\nimport { IRegistry } from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport { IOptionFactory } from \\\"../interfaces/IOptionFactory.sol\\\";\\r\\nimport { IRedeemFactory } from \\\"../interfaces/IRedeemFactory.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { Pausable } from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport {\\r\\n    ReentrancyGuard\\r\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract Registry is IRegistry, Ownable, Pausable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public override optionFactory;\\r\\n    address public override redeemFactory;\\r\\n\\r\\n    mapping(address => bool) private verifiedTokens;\\r\\n    mapping(uint256 => bool) private verifiedExpiries;\\r\\n    address[] public allOptionClones;\\r\\n\\r\\n    event UpdatedOptionFactory(address indexed optionFactory_);\\r\\n    event UpdatedRedeemFactory(address indexed redeemFactory_);\\r\\n    event VerifiedToken(address indexed token);\\r\\n    event VerifiedExpiry(uint256 expiry);\\r\\n    event UnverifiedToken(address indexed token);\\r\\n    event UnverifiedExpiry(uint256 expiry);\\r\\n    event DeployedOptionClone(\\r\\n        address indexed from,\\r\\n        address indexed optionAddress,\\r\\n        address indexed redeemAddress\\r\\n    );\\r\\n\\r\\n    constructor() public {\\r\\n        transferOwnership(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses the deployOption function.\\r\\n     */\\r\\n    function pauseDeployments() external override onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpauses the deployOption function.\\r\\n     */\\r\\n    function unpauseDeployments() external override onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the option factory contract to use for deploying clones.\\r\\n     * @param optionFactory_ The address of the option factory.\\r\\n     */\\r\\n    function setOptionFactory(address optionFactory_)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        optionFactory = optionFactory_;\\r\\n        emit UpdatedOptionFactory(optionFactory_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the redeem factory contract to use for deploying clones.\\r\\n     * @param redeemFactory_ The address of the redeem factory.\\r\\n     */\\r\\n    function setRedeemFactory(address redeemFactory_)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        redeemFactory = redeemFactory_;\\r\\n        emit UpdatedRedeemFactory(redeemFactory_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets an ERC-20 token verification status to true.\\r\\n     * @notice A \\\"verified\\\" token is a standard ERC-20 token that we have tested with the option contract.\\r\\n     *         An example of an \\\"unverified\\\" token is a non-standard ERC-20 token which has not been tested.\\r\\n     */\\r\\n    function verifyToken(address tokenAddress) external override onlyOwner {\\r\\n        require(tokenAddress != address(0x0), \\\"ERR_ZERO_ADDRESS\\\");\\r\\n        verifiedTokens[tokenAddress] = true;\\r\\n        emit VerifiedToken(tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a verified token's verification status to false.\\r\\n     */\\r\\n    function unverifyToken(address tokenAddress) external override onlyOwner {\\r\\n        verifiedTokens[tokenAddress] = false;\\r\\n        emit UnverifiedToken(tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets an expiry timestamp's verification status to true.\\r\\n     * @notice A mapping of standardized, \\\"verified\\\", timestamps for the options.\\r\\n     */\\r\\n    function verifyExpiry(uint256 expiry) external override onlyOwner {\\r\\n        require(expiry >= now, \\\"ERR_EXPIRED_TIMESTAMP\\\");\\r\\n        verifiedExpiries[expiry] = true;\\r\\n        emit VerifiedExpiry(expiry);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets an expiry timestamp's verification status to false.\\r\\n     * @notice A mapping of standardized, \\\"verified\\\", timestamps for the options.\\r\\n     */\\r\\n    function unverifyExpiry(uint256 expiry) external override onlyOwner {\\r\\n        verifiedExpiries[expiry] = false;\\r\\n        emit UnverifiedExpiry(expiry);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys an option contract clone with create2.\\r\\n     * @param underlyingToken The address of the ERC-20 underlying token.\\r\\n     * @param strikeToken The address of the ERC-20 strike token.\\r\\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\\r\\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\\r\\n     * @param expiry The unix timestamp of the option's expiration date.\\r\\n     * @return The address of the deployed option clone.\\r\\n     */\\r\\n    function deployOption(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external override nonReentrant whenNotPaused returns (address) {\\r\\n        // Validation checks for option parameters.\\r\\n        require(base > 0, \\\"ERR_BASE_ZERO\\\");\\r\\n        require(quote > 0, \\\"ERR_QUOTE_ZERO\\\");\\r\\n        require(expiry >= now, \\\"ERR_EXPIRY\\\");\\r\\n        require(underlyingToken != strikeToken, \\\"ERR_SAME_ASSETS\\\");\\r\\n        require(\\r\\n            underlyingToken != address(0x0) && strikeToken != address(0x0),\\r\\n            \\\"ERR_ZERO_ADDRESS\\\"\\r\\n        );\\r\\n\\r\\n        // Deploy option and redeem contract clones.\\r\\n        address optionAddress = IOptionFactory(optionFactory).deployClone(\\r\\n            underlyingToken,\\r\\n            strikeToken,\\r\\n            base,\\r\\n            quote,\\r\\n            expiry\\r\\n        );\\r\\n        address redeemAddress = IRedeemFactory(redeemFactory).deployClone(\\r\\n            optionAddress\\r\\n        );\\r\\n\\r\\n        // Add the clone to the allOptionClones address array.\\r\\n        allOptionClones.push(optionAddress);\\r\\n\\r\\n        // Initialize the new option contract's paired redeem token.\\r\\n        IOptionFactory(optionFactory).initRedeemToken(\\r\\n            optionAddress,\\r\\n            redeemAddress\\r\\n        );\\r\\n        emit DeployedOptionClone(msg.sender, optionAddress, redeemAddress);\\r\\n        return optionAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the option address deployed with create2 using the parameter arguments.\\r\\n     * @param underlyingToken The address of the ERC-20 underlying token.\\r\\n     * @param strikeToken The address of the ERC-20 strike token.\\r\\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\\r\\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\\r\\n     * @param expiry The unix timestamp of the option's expiration date.\\r\\n     * @return The address of the option with the parameter arguments.\\r\\n     */\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) public override view returns (address) {\\r\\n        address optionAddress = IOptionFactory(optionFactory)\\r\\n            .calculateOptionAddress(\\r\\n            underlyingToken,\\r\\n            strikeToken,\\r\\n            base,\\r\\n            quote,\\r\\n            expiry\\r\\n        );\\r\\n        return optionAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks an option address to see if it has verified assets and expiry time.\\r\\n     * @param optionAddress The address of the option token.\\r\\n     * @return bool If the option has verified underlying and strike tokens, and expiry time.\\r\\n     */\\r\\n    function isVerifiedOption(address optionAddress)\\r\\n        external\\r\\n        override\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        IOption option = IOption(optionAddress);\\r\\n        address underlyingToken = option.getUnderlyingTokenAddress();\\r\\n        address strikeToken = option.getStrikeTokenAddress();\\r\\n        uint256 expiry = option.getExpiryTime();\\r\\n        bool verifiedUnderlying = isVerifiedToken(underlyingToken);\\r\\n        bool verifiedStrike = isVerifiedToken(strikeToken);\\r\\n        bool verifiedExpiry = isVerifiedExpiry(expiry);\\r\\n        return verifiedUnderlying && verifiedStrike && verifiedExpiry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the length of the allOptionClones address array.\\r\\n     */\\r\\n    function getAllOptionClonesLength() public view returns (uint256) {\\r\\n        return allOptionClones.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks the verifiedTokens private mapping and returns verification status of token.\\r\\n     * @return bool Verified or not verified.\\r\\n     */\\r\\n    function isVerifiedToken(address tokenAddress) public view returns (bool) {\\r\\n        return verifiedTokens[tokenAddress];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks the verifiedExpiries private mapping and returns verification status of token.\\r\\n     * @return bool Verified or not verified.\\r\\n     */\\r\\n    function isVerifiedExpiry(uint256 expiry) public view returns (bool) {\\r\\n        return verifiedExpiries[expiry];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the option address and returns address zero if not yet deployed.\\r\\n     * @notice Will calculate the option address using the parameter arguments.\\r\\n     *         Checks the code size of the address to see if the contract has been deployed yet.\\r\\n     *         If contract has not been deployed, returns address zero.\\r\\n     * @param underlyingToken The address of the ERC-20 underlying token.\\r\\n     * @param strikeToken The address of the ERC-20 strike token.\\r\\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\\r\\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\\r\\n     * @param expiry The unix timestamp of the option's expiration date.\\r\\n     * @return The address of the option with the parameter arguments.\\r\\n     */\\r\\n    function getOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) public override view returns (address) {\\r\\n        address optionAddress = calculateOptionAddress(\\r\\n            underlyingToken,\\r\\n            strikeToken,\\r\\n            base,\\r\\n            quote,\\r\\n            expiry\\r\\n        );\\r\\n        uint32 size = checkCodeSize(optionAddress);\\r\\n        if (size > 0) {\\r\\n            return optionAddress;\\r\\n        } else {\\r\\n            return address(0x0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks the code size of a target address and returns the uint32 size.\\r\\n     * @param target The address to check code size.\\r\\n     */\\r\\n    function checkCodeSize(address target) private view returns (uint32) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(target)\\r\\n        }\\r\\n        return size;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x027242dd1913c0695475b055ed09b2ed557f7a76c4030d6df46b07ed4f8d67f3\"},\"contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"contracts/option/interfaces/IOptionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IOptionFactory {\\r\\n    function deployClone(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external returns (address);\\r\\n\\r\\n    function initRedeemToken(address optionAddress, address redeemAddress)\\r\\n        external;\\r\\n\\r\\n    function deployOptionTemplate() external;\\r\\n\\r\\n    function optionTemplate() external returns (address);\\r\\n\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x523335d4aa7b9895d0afd9dbc14e3f3356a1d64827a6f90571c08aef54fe5a3c\"},\"contracts/option/interfaces/IRedeemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IRedeemFactory {\\r\\n    function deployClone(address optionToken) external returns (address);\\r\\n\\r\\n    function deployRedeemTemplate() external;\\r\\n\\r\\n    function redeemTemplate() external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xe08632c1198fa61a3848da09b11fd427f3fedfc1c1e3b8176e3ce2055e7ae208\"},\"contracts/option/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function pauseDeployments() external;\\r\\n\\r\\n    function unpauseDeployments() external;\\r\\n\\r\\n    function deployOption(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external returns (address);\\r\\n\\r\\n    function setOptionFactory(address optionFactory_) external;\\r\\n\\r\\n    function setRedeemFactory(address redeemFactory_) external;\\r\\n\\r\\n    function optionFactory() external returns (address);\\r\\n\\r\\n    function redeemFactory() external returns (address);\\r\\n\\r\\n    function verifyToken(address tokenAddress) external;\\r\\n\\r\\n    function verifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function unverifyToken(address tokenAddress) external;\\r\\n\\r\\n    function unverifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function getOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function isVerifiedOption(address optionAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x02aeb84e8b748674bc31707899158885066923f203e7a3a58cee3c68a49ec96f\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506000620000276001600160e01b036200008e16565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020620015ee833981519152908290a3506000805461ffff60a01b1916600160a81b17905562000088336001600160e01b036200009216565b62000199565b3390565b620000a56001600160e01b036200008e16565b6000546001600160a01b0390811691161462000108576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166200014f5760405162461bcd60e51b8152600401808060200182810382526026815260200180620015c86026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020620015ee83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61141f80620001a96000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063b000e9ec1161007c578063b000e9ec14610339578063b3461c871461037b578063c7a988ac14610383578063e4ec108c1461039d578063f2fde38b146103c3578063fce4ae3a146103e957610142565b80638da5cb5b1461029b5780639180928f146102a357806392160076146102e5578063978897341461030b578063aaf15bb51461031357610142565b80635c975abb1161010a5780635c975abb1461022c5780636189a4d31461023457806366f1976d14610251578063715018a6146102595780637f53abde146102615780638229d8511461027e57610142565b80631027b219146101475780632e53926d1461018157806339c00f41146101df5780633d11c796146101fe5780634130276b14610206575b600080fd5b61016d6004803603602081101561015d57600080fd5b50356001600160a01b031661040f565b604080519115158252519081900360200190f35b6101c3600480360360a081101561019757600080fd5b506001600160a01b0381358116916020810135909116906040810135906060810135906080013561042d565b604080516001600160a01b039092168252519081900360200190f35b6101fc600480360360208110156101f557600080fd5b50356104d2565b005b6101fc610578565b6101fc6004803603602081101561021c57600080fd5b50356001600160a01b03166105da565b61016d6106cc565b6101c36004803603602081101561024a57600080fd5b50356106dc565b6101fc610703565b6101fc610763565b6101fc6004803603602081101561027757600080fd5b5035610805565b61016d6004803603602081101561029457600080fd5b50356108fb565b6101c3610910565b6101c3600480360360a08110156102b957600080fd5b506001600160a01b0381358116916020810135909116906040810135906060810135906080013561091f565b6101fc600480360360208110156102fb57600080fd5b50356001600160a01b0316610d8d565b6101c3610e2f565b6101fc6004803603602081101561032957600080fd5b50356001600160a01b0316610e3e565b6101c3600480360360a081101561034f57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060800135610ee0565b6101c3610f1e565b61038b610f2d565b60408051918252519081900360200190f35b6101fc600480360360208110156103b357600080fd5b50356001600160a01b0316610f33565b6101fc600480360360208110156103d957600080fd5b50356001600160a01b0316610fd4565b61016d600480360360208110156103ff57600080fd5b50356001600160a01b03166110cc565b6001600160a01b031660009081526003602052604090205460ff1690565b60015460408051632e53926d60e01b81526001600160a01b0388811660048301528781166024830152604482018790526064820186905260848201859052915160009384931691632e53926d9160a4808301926020929190829003018186803b15801561049957600080fd5b505afa1580156104ad573d6000803e3d6000fd5b505050506040513d60208110156104c357600080fd5b50519150505b95945050505050565b6104da611265565b6000546001600160a01b0390811691161461052a576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b600081815260046020908152604091829020805460ff19169055815183815291517f928f06bc62edcabae2855ccfad4a2f103f1516665607048ed17a208d755713f99281900390910190a150565b610580611265565b6000546001600160a01b039081169116146105d0576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b6105d8611269565b565b6105e2611265565b6000546001600160a01b03908116911614610632576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b6001600160a01b038116610680576040805162461bcd60e51b815260206004820152601060248201526f4552525f5a45524f5f4144445245535360801b604482015290519081900360640190fd5b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517fb48a62163a7d747c16a177c1eb529841e700a0bb4a1e787d7d293eaaf7716d4d9190a250565b600054600160a01b900460ff1690565b600581815481106106e957fe5b6000918252602090912001546001600160a01b0316905081565b61070b611265565b6000546001600160a01b0390811691161461075b576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b6105d8611311565b61076b611265565b6000546001600160a01b039081169116146107bb576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61080d611265565b6000546001600160a01b0390811691161461085d576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b428110156108aa576040805162461bcd60e51b815260206004820152601560248201527404552525f455850495245445f54494d455354414d5605c1b604482015290519081900360640190fd5b600081815260046020908152604091829020805460ff19166001179055815183815291517f01a8c23c3824519cd8b455f3e637b99e97249d2e06ab99d93f43d60d163fb5bf9281900390910190a150565b60009081526004602052604090205460ff1690565b6000546001600160a01b031690565b60008054600160a81b900460ff1661097e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6000805460ff60a81b191690819055600160a01b900460ff16156109dc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60008411610a21576040805162461bcd60e51b815260206004820152600d60248201526c4552525f424153455f5a45524f60981b604482015290519081900360640190fd5b60008311610a67576040805162461bcd60e51b815260206004820152600e60248201526d4552525f51554f54455f5a45524f60901b604482015290519081900360640190fd5b42821015610aa9576040805162461bcd60e51b815260206004820152600a6024820152694552525f45585049525960b01b604482015290519081900360640190fd5b846001600160a01b0316866001600160a01b03161415610b02576040805162461bcd60e51b815260206004820152600f60248201526e4552525f53414d455f41535345545360881b604482015290519081900360640190fd5b6001600160a01b03861615801590610b2257506001600160a01b03851615155b610b66576040805162461bcd60e51b815260206004820152601060248201526f4552525f5a45524f5f4144445245535360801b604482015290519081900360640190fd5b6001546040805163d604a1ef60e01b81526001600160a01b03898116600483015288811660248301526044820188905260648201879052608482018690529151600093929092169163d604a1ef9160a48082019260209290919082900301818787803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505050506040513d6020811015610bff57600080fd5b505160025460408051637f46b1cb60e11b81526001600160a01b0380851660048301529151939450600093919092169163fe8d639691602480830192602092919082900301818787803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b505050506040513d6020811015610c7f57600080fd5b5051600580546001808201835560009283527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090910180546001600160a01b0319166001600160a01b038781169182179092559154604080516335638b6b60e01b8152600481019490945282861660248501525194955016926335638b6b9260448084019391929182900301818387803b158015610d1c57600080fd5b505af1158015610d30573d6000803e3d6000fd5b50506040516001600160a01b0380851693508516915033907fdb19f143ae8e015bc96c062e81a1c69f2e1568dfba82c18947239515a0b8725b90600090a45090506000805460ff60a81b1916600160a81b17905595945050505050565b610d95611265565b6000546001600160a01b03908116911614610de5576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f4f32895401ed84629e6727059ffe5f8d2f637bc6c325630ba6054007ceb95c2c90600090a250565b6002546001600160a01b031681565b610e46611265565b6000546001600160a01b03908116911614610e96576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517feec46c83ee301290575f8c7bb5428480c127f0c54263c00f30465050f4495a8e90600090a250565b600080610ef0878787878761042d565b90506000610efd8261139f565b905063ffffffff811615610f13575090506104c9565b6000925050506104c9565b6001546001600160a01b031681565b60055490565b610f3b611265565b6000546001600160a01b03908116911614610f8b576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b6001600160a01b038116600081815260036020526040808220805460ff19169055517fe9769d9a414671453740fdb9cc92922655391134bd1beec930a2203bd45a67c09190a250565b610fdc611265565b6000546001600160a01b0390811691161461102c576040805162461bcd60e51b815260206004820181905260248201526000805160206113ca833981519152604482015290519081900360640190fd5b6001600160a01b0381166110715760405162461bcd60e51b81526004018080602001828103825260268152602001806113a46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000808290506000816001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561110d57600080fd5b505afa158015611121573d6000803e3d6000fd5b505050506040513d602081101561113757600080fd5b50516040805163a1a4076160e01b815290519192506000916001600160a01b0385169163a1a40761916004808301926020929190829003018186803b15801561117f57600080fd5b505afa158015611193573d6000803e3d6000fd5b505050506040513d60208110156111a957600080fd5b50516040805162972d6f60e61b815290519192506000916001600160a01b038616916325cb5bc0916004808301926020929190829003018186803b1580156111f057600080fd5b505afa158015611204573d6000803e3d6000fd5b505050506040513d602081101561121a57600080fd5b5051905060006112298461040f565b905060006112368461040f565b90506000611243846108fb565b905082801561124f5750815b80156112585750805b9998505050505050505050565b3390565b600054600160a01b900460ff166112be576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6112f4611265565b604080516001600160a01b039092168252519081900360200190a1565b600054600160a01b900460ff1615611363576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112f4611265565b3b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220918abbbe6d602a0734b205656fb73a9136155e73069e950f1bfd4982da61746c64736f6c634300060200334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573738be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "calculateOptionAddress(address,address,uint256,uint256,uint256)": {
        "details": "Calculates the option address deployed with create2 using the parameter arguments.",
        "params": {
          "base": "The quantity of underlying tokens per unit of quote amount of strike tokens.",
          "expiry": "The unix timestamp of the option's expiration date.",
          "quote": "The quantity of strike tokens per unit of base amount of underlying tokens.",
          "strikeToken": "The address of the ERC-20 strike token.",
          "underlyingToken": "The address of the ERC-20 underlying token."
        },
        "returns": {
          "_0": "The address of the option with the parameter arguments."
        }
      },
      "deployOption(address,address,uint256,uint256,uint256)": {
        "details": "Deploys an option contract clone with create2.",
        "params": {
          "base": "The quantity of underlying tokens per unit of quote amount of strike tokens.",
          "expiry": "The unix timestamp of the option's expiration date.",
          "quote": "The quantity of strike tokens per unit of base amount of underlying tokens.",
          "strikeToken": "The address of the ERC-20 strike token.",
          "underlyingToken": "The address of the ERC-20 underlying token."
        },
        "returns": {
          "_0": "The address of the deployed option clone."
        }
      },
      "getAllOptionClonesLength()": {
        "details": "Returns the length of the allOptionClones address array."
      },
      "getOptionAddress(address,address,uint256,uint256,uint256)": {
        "details": "Gets the option address and returns address zero if not yet deployed.",
        "params": {
          "base": "The quantity of underlying tokens per unit of quote amount of strike tokens.",
          "expiry": "The unix timestamp of the option's expiration date.",
          "quote": "The quantity of strike tokens per unit of base amount of underlying tokens.",
          "strikeToken": "The address of the ERC-20 strike token.",
          "underlyingToken": "The address of the ERC-20 underlying token."
        },
        "returns": {
          "_0": "The address of the option with the parameter arguments."
        }
      },
      "isVerifiedExpiry(uint256)": {
        "details": "Checks the verifiedExpiries private mapping and returns verification status of token.",
        "returns": {
          "_0": "bool Verified or not verified."
        }
      },
      "isVerifiedOption(address)": {
        "details": "Checks an option address to see if it has verified assets and expiry time.",
        "params": {
          "optionAddress": "The address of the option token."
        },
        "returns": {
          "_0": "bool If the option has verified underlying and strike tokens, and expiry time."
        }
      },
      "isVerifiedToken(address)": {
        "details": "Checks the verifiedTokens private mapping and returns verification status of token.",
        "returns": {
          "_0": "bool Verified or not verified."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseDeployments()": {
        "details": "Pauses the deployOption function."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOptionFactory(address)": {
        "details": "Sets the option factory contract to use for deploying clones.",
        "params": {
          "optionFactory_": "The address of the option factory."
        }
      },
      "setRedeemFactory(address)": {
        "details": "Sets the redeem factory contract to use for deploying clones.",
        "params": {
          "redeemFactory_": "The address of the redeem factory."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpauseDeployments()": {
        "details": "Unpauses the deployOption function."
      },
      "unverifyExpiry(uint256)": {
        "details": "Sets an expiry timestamp's verification status to false."
      },
      "unverifyToken(address)": {
        "details": "Sets a verified token's verification status to false."
      },
      "verifyExpiry(uint256)": {
        "details": "Sets an expiry timestamp's verification status to true."
      },
      "verifyToken(address)": {
        "details": "Sets an ERC-20 token verification status to true."
      }
    }
  },
  "userdoc": {
    "methods": {
      "getOptionAddress(address,address,uint256,uint256,uint256)": {
        "notice": "Will calculate the option address using the parameter arguments.        Checks the code size of the address to see if the contract has been deployed yet.        If contract has not been deployed, returns address zero."
      },
      "unverifyExpiry(uint256)": {
        "notice": "A mapping of standardized, \"verified\", timestamps for the options."
      },
      "verifyExpiry(uint256)": {
        "notice": "A mapping of standardized, \"verified\", timestamps for the options."
      },
      "verifyToken(address)": {
        "notice": "A \"verified\" token is a standard ERC-20 token that we have tested with the option contract.        An example of an \"unverified\" token is a non-standard ERC-20 token which has not been tested."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1281,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1351,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "_notEntered",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1418,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "optionFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1421,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "redeemFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1425,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "verifiedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1429,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "verifiedExpiries",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1432,
        "contract": "contracts/option/applications/Registry.sol:Registry",
        "label": "allOptionClones",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}