{
  "address": "0xBA4Fc7f352dDb414cEFefA97Da4C6FeB60d5Cca0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inOptions",
          "type": "uint256"
        }
      ],
      "name": "TraderClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outUnderlyings",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inStrikes",
          "type": "uint256"
        }
      ],
      "name": "TraderExercise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputOptions",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputRedeems",
          "type": "uint256"
        }
      ],
      "name": "TraderMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inRedeems",
          "type": "uint256"
        }
      ],
      "name": "TraderRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inOptions",
          "type": "uint256"
        }
      ],
      "name": "TraderUnwind",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "closeQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "safeClose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exerciseQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "safeExercise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "safeRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unwindQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "safeUnwind",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6581b34afd105e9fe5f6fe8467ce5ec8bb34a4afa13cbba8f8dfa98367ac085b",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0xBA4Fc7f352dDb414cEFefA97Da4C6FeB60d5Cca0",
    "transactionIndex": 1,
    "gasUsed": "1417358",
    "logsBloom": "0x
    "blockHash": "0xd731175c6fbbeb241edcdbe59ade4865565ac51b9cd183137d41dc93472797ce",
    "transactionHash": "0x6581b34afd105e9fe5f6fe8467ce5ec8bb34a4afa13cbba8f8dfa98367ac085b",
    "logs": [],
    "blockNumber": 23890442,
    "cumulativeGasUsed": "1452573",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0a1e359811322d97991e03f863a0c30c2cf029c"
  ],
  "solcInputHash": "e8df3bbc9cd68519fa878cebbe263f7f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inOptions\",\"type\":\"uint256\"}],\"name\":\"TraderClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outUnderlyings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inStrikes\",\"type\":\"uint256\"}],\"name\":\"TraderExercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputOptions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputRedeems\",\"type\":\"uint256\"}],\"name\":\"TraderMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inRedeems\",\"type\":\"uint256\"}],\"name\":\"TraderRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inOptions\",\"type\":\"uint256\"}],\"name\":\"TraderUnwind\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closeQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"safeClose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exerciseQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"safeExercise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"safeRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unwindQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"safeUnwind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"safeClose(address,uint256,address)\":{\"details\":\"Burn optionTokens and redeemTokens to withdraw underlyingTokens.\",\"params\":{\"closeQuantity\":\"Quantity of optionTokens to burn. (Implictly will burn the strike ratio quantity of redeemTokens).\",\"optionToken\":\"The address of the option contract.\",\"receiver\":\"The underlyingTokens are sent to the receiver address.\"}},\"safeExercise(address,uint256,address)\":{\"details\":\"Swaps strikeTokens to underlyingTokens using the strike ratio as the exchange rate.\",\"params\":{\"exerciseQuantity\":\"Quantity of optionTokens to exercise.\",\"optionToken\":\"The address of the option contract.\",\"receiver\":\"The underlyingTokens are sent to the receiver address.\"}},\"safeMint(address,uint256,address)\":{\"details\":\"Mint options at a 1:1 ratio with deposited underlying tokens.\",\"params\":{\"mintQuantity\":\"Quantity of options to mint and underlyingToken to deposit.\",\"optionToken\":\"The address of the option contract.\",\"receiver\":\"The newly minted options and redeems are sent to the receiver address.\"}},\"safeRedeem(address,uint256,address)\":{\"details\":\"Burns redeemTokens to withdraw available strikeTokens.\",\"params\":{\"optionToken\":\"The address of the option contract.\",\"receiver\":\"The strikeTokens are sent to the receiver address.\",\"redeemQuantity\":\"redeemQuantity of redeemTokens to burn.\"}},\"safeUnwind(address,uint256,address)\":{\"details\":\"Burn redeemTokens to withdraw underlyingTokens and strikeTokens from expired options.\",\"params\":{\"optionToken\":\"The address of the option contract.\",\"receiver\":\"The underlyingTokens and redeemTokens are sent to the receiver address.\",\"unwindQuantity\":\"Quantity of option tokens used to calculate the amount of redeem tokens to burn.\"}}}},\"userdoc\":{\"methods\":{\"safeClose(address,uint256,address)\":{\"notice\":\"The redeemTokens to burn is equal to the optionTokens * strike ratio. inOptions = inRedeems / strike ratio = outUnderlyings\"},\"safeExercise(address,uint256,address)\":{\"notice\":\"Burns optionTokens, option contract receives strikeTokens, user receives underlyingTokens.\"},\"safeMint(address,uint256,address)\":{\"notice\":\"Also mints redeems at a strike ratio to the deposited underlyings. Warning: Calls msg.sender with safeTransferFrom.\"},\"safeRedeem(address,uint256,address)\":{\"notice\":\"inRedeems = outStrikes.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/option/extensions/Trader.sol\":\"Trader\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x0de74dfa6b37943c1b834cbd8fb7a8d052e5ff80c7adb33692102dd6cd2985e9\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x3211de52f707a62a356a34fdea9d6a7bed46402d5ce45f1891a16fe2132fbb47\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0x5cc574fb09fe4a5f96228ee3af85d268aae6e0b91fc0f2f90b08e9b207bfefd5\"},\"contracts/option/extensions/Trader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.2;\\n\\n/**\\n * @title   Trader\\n * @notice  Abstracts the interfacing with the protocol's option contract for ease-of-use.\\n * @author  Primitive\\n */\\n\\nimport { IOption } from \\\"../interfaces/IOption.sol\\\";\\nimport { ITrader } from \\\"../interfaces/ITrader.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { TraderLib } from \\\"../libraries/TraderLib.sol\\\";\\n\\ncontract Trader is ITrader, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address payable public weth;\\n\\n    event TraderMint(\\n        address indexed from,\\n        address indexed option,\\n        uint256 outputOptions,\\n        uint256 outputRedeems\\n    );\\n    event TraderExercise(\\n        address indexed from,\\n        address indexed option,\\n        uint256 outUnderlyings,\\n        uint256 inStrikes\\n    );\\n    event TraderRedeem(\\n        address indexed from,\\n        address indexed option,\\n        uint256 inRedeems\\n    );\\n    event TraderClose(\\n        address indexed from,\\n        address indexed option,\\n        uint256 inOptions\\n    );\\n\\n    event TraderUnwind(\\n        address indexed from,\\n        address indexed option,\\n        uint256 inOptions\\n    );\\n\\n    constructor(address payable _weth) public {\\n        weth = _weth;\\n    }\\n\\n    /**\\n     * @dev Mint options at a 1:1 ratio with deposited underlying tokens.\\n     * @notice Also mints redeems at a strike ratio to the deposited underlyings.\\n     * Warning: Calls msg.sender with safeTransferFrom.\\n     * @param optionToken The address of the option contract.\\n     * @param mintQuantity Quantity of options to mint and underlyingToken to deposit.\\n     * @param receiver The newly minted options and redeems are sent to the receiver address.\\n     */\\n    function safeMint(\\n        IOption optionToken,\\n        uint256 mintQuantity,\\n        address receiver\\n    ) external override nonReentrant returns (uint256, uint256) {\\n        (uint256 outputOptions, uint256 outputRedeems) = TraderLib.safeMint(\\n            optionToken,\\n            mintQuantity,\\n            receiver\\n        );\\n        emit TraderMint(\\n            msg.sender,\\n            address(optionToken),\\n            outputOptions,\\n            outputRedeems\\n        );\\n        return (outputOptions, outputRedeems);\\n    }\\n\\n    /**\\n     * @dev Swaps strikeTokens to underlyingTokens using the strike ratio as the exchange rate.\\n     * @notice Burns optionTokens, option contract receives strikeTokens, user receives underlyingTokens.\\n     * @param optionToken The address of the option contract.\\n     * @param exerciseQuantity Quantity of optionTokens to exercise.\\n     * @param receiver The underlyingTokens are sent to the receiver address.\\n     */\\n    function safeExercise(\\n        IOption optionToken,\\n        uint256 exerciseQuantity,\\n        address receiver\\n    ) external override nonReentrant returns (uint256, uint256) {\\n        (uint256 inStrikes, uint256 inOptions) = TraderLib.safeExercise(\\n            optionToken,\\n            exerciseQuantity,\\n            receiver\\n        );\\n        emit TraderExercise(\\n            msg.sender,\\n            address(optionToken),\\n            exerciseQuantity,\\n            inStrikes\\n        );\\n\\n        return (inStrikes, inOptions);\\n    }\\n\\n    /**\\n     * @dev Burns redeemTokens to withdraw available strikeTokens.\\n     * @notice inRedeems = outStrikes.\\n     * @param optionToken The address of the option contract.\\n     * @param redeemQuantity redeemQuantity of redeemTokens to burn.\\n     * @param receiver The strikeTokens are sent to the receiver address.\\n     */\\n    function safeRedeem(\\n        IOption optionToken,\\n        uint256 redeemQuantity,\\n        address receiver\\n    ) external override nonReentrant returns (uint256) {\\n        uint256 inRedeems = TraderLib.safeRedeem(\\n            optionToken,\\n            redeemQuantity,\\n            receiver\\n        );\\n        emit TraderRedeem(msg.sender, address(optionToken), inRedeems);\\n        return inRedeems;\\n    }\\n\\n    /**\\n     * @dev Burn optionTokens and redeemTokens to withdraw underlyingTokens.\\n     * @notice The redeemTokens to burn is equal to the optionTokens * strike ratio.\\n     * inOptions = inRedeems / strike ratio = outUnderlyings\\n     * @param optionToken The address of the option contract.\\n     * @param closeQuantity Quantity of optionTokens to burn.\\n     * (Implictly will burn the strike ratio quantity of redeemTokens).\\n     * @param receiver The underlyingTokens are sent to the receiver address.\\n     */\\n    function safeClose(\\n        IOption optionToken,\\n        uint256 closeQuantity,\\n        address receiver\\n    )\\n        external\\n        override\\n        nonReentrant\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 inRedeems,\\n            uint256 inOptions,\\n            uint256 outUnderlyings\\n        ) = TraderLib.safeClose(optionToken, closeQuantity, receiver);\\n        emit TraderClose(msg.sender, address(optionToken), inOptions);\\n        return (inRedeems, inOptions, outUnderlyings);\\n    }\\n\\n    /**\\n     * @dev Burn redeemTokens to withdraw underlyingTokens and strikeTokens from expired options.\\n     * @param optionToken The address of the option contract.\\n     * @param unwindQuantity Quantity of option tokens used to calculate the amount of redeem tokens to burn.\\n     * @param receiver The underlyingTokens and redeemTokens are sent to the receiver address.\\n     */\\n    function safeUnwind(\\n        IOption optionToken,\\n        uint256 unwindQuantity,\\n        address receiver\\n    )\\n        external\\n        override\\n        nonReentrant\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 inRedeems,\\n            uint256 inOptions,\\n            uint256 outUnderlyings\\n        ) = TraderLib.safeUnwind(optionToken, unwindQuantity, receiver);\\n        emit TraderUnwind(msg.sender, address(optionToken), inOptions);\\n        return (inRedeems, inOptions, outUnderlyings);\\n    }\\n}\\n\",\"keccak256\":\"0x68ffc7c62aff37f836cdc97f9aa21d4ab0b1632f8d761b0a2a844ffb4b2d498e\"},\"contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"contracts/option/interfaces/ITrader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IOption } from \\\"./IOption.sol\\\";\\r\\n\\r\\ninterface ITrader {\\r\\n    function safeMint(\\r\\n        IOption optionToken,\\r\\n        uint256 mintQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeExercise(\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeRedeem(\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function safeClose(\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function safeUnwind(\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xb8f9e6d923e556e137a606c76e9adf8fd07375c7ff0650f4a7932adc950df44f\"},\"contracts/option/libraries/TraderLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @title   Trader Library\\n * @notice  Internal functions that can be used to safeTransfer\\n *          tokens into the option contract then call respective option contract functions.\\n * @author  Primitive\\n */\\n\\nimport { IOption } from \\\"../interfaces/IOption.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nlibrary TraderLib {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Conducts important safety checks to safely mint option tokens.\\n     * @param optionToken The address of the option token to mint.\\n     * @param mintQuantity The quantity of option tokens to mint.\\n     * @param receiver The address which receives the minted option tokens.\\n     */\\n    function safeMint(\\n        IOption optionToken,\\n        uint256 mintQuantity,\\n        address receiver\\n    ) internal returns (uint256, uint256) {\\n        require(mintQuantity > 0, \\\"ERR_ZERO\\\");\\n        IERC20(optionToken.getUnderlyingTokenAddress()).safeTransferFrom(\\n            msg.sender,\\n            address(optionToken),\\n            mintQuantity\\n        );\\n        (uint256 outputOptions, uint256 outputRedeems) = optionToken\\n            .mintOptions(receiver);\\n        return (outputOptions, outputRedeems);\\n    }\\n\\n    /**\\n     * @dev Swaps strikeTokens to underlyingTokens using the strike ratio as the exchange rate.\\n     * @notice Burns optionTokens, option contract receives strikeTokens, user receives underlyingTokens.\\n     * @param optionToken The address of the option contract.\\n     * @param exerciseQuantity Quantity of optionTokens to exercise.\\n     * @param receiver The underlyingTokens are sent to the receiver address.\\n     */\\n    function safeExercise(\\n        IOption optionToken,\\n        uint256 exerciseQuantity,\\n        address receiver\\n    ) internal returns (uint256, uint256) {\\n        require(exerciseQuantity > 0, \\\"ERR_ZERO\\\");\\n        require(\\n            IERC20(address(optionToken)).balanceOf(msg.sender) >=\\n                exerciseQuantity,\\n            \\\"ERR_BAL_OPTIONS\\\"\\n        );\\n\\n        // Calculate quantity of strikeTokens needed to exercise quantity of optionTokens.\\n        uint256 inputStrikes = exerciseQuantity\\n            .mul(optionToken.getQuoteValue())\\n            .div(optionToken.getBaseValue());\\n        require(\\n            IERC20(optionToken.getStrikeTokenAddress()).balanceOf(msg.sender) >=\\n                inputStrikes,\\n            \\\"ERR_BAL_STRIKE\\\"\\n        );\\n        IERC20(optionToken.getStrikeTokenAddress()).safeTransferFrom(\\n            msg.sender,\\n            address(optionToken),\\n            inputStrikes\\n        );\\n        IERC20(address(optionToken)).safeTransferFrom(\\n            msg.sender,\\n            address(optionToken),\\n            exerciseQuantity\\n        );\\n\\n        uint256 inputOptions;\\n        (inputStrikes, inputOptions) = optionToken.exerciseOptions(\\n            receiver,\\n            exerciseQuantity,\\n            new bytes(0)\\n        );\\n        return (inputStrikes, inputOptions);\\n    }\\n\\n    /**\\n     * @dev Burns redeemTokens to withdraw available strikeTokens.\\n     * @notice inputRedeems = outputStrikes.\\n     * @param optionToken The address of the option contract.\\n     * @param redeemQuantity redeemQuantity of redeemTokens to burn.\\n     * @param receiver The strikeTokens are sent to the receiver address.\\n     */\\n    function safeRedeem(\\n        IOption optionToken,\\n        uint256 redeemQuantity,\\n        address receiver\\n    ) internal returns (uint256) {\\n        require(redeemQuantity > 0, \\\"ERR_ZERO\\\");\\n        require(\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\n                redeemQuantity,\\n            \\\"ERR_BAL_REDEEM\\\"\\n        );\\n        // There can be the case there is no available strikes to redeem, causing a revert.\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\n            msg.sender,\\n            address(optionToken),\\n            redeemQuantity\\n        );\\n        uint256 inputRedeems = optionToken.redeemStrikeTokens(receiver);\\n        return inputRedeems;\\n    }\\n\\n    /**\\n     * @dev Burn optionTokens and redeemTokens to withdraw underlyingTokens.\\n     * @notice The redeemTokens to burn is equal to the optionTokens * strike ratio.\\n     * inputOptions = inputRedeems / strike ratio = outUnderlyings\\n     * @param optionToken The address of the option contract.\\n     * @param closeQuantity Quantity of optionTokens to burn.\\n     * (Implictly will burn the strike ratio quantity of redeemTokens).\\n     * @param receiver The underlyingTokens are sent to the receiver address.\\n     */\\n    function safeClose(\\n        IOption optionToken,\\n        uint256 closeQuantity,\\n        address receiver\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(closeQuantity > 0, \\\"ERR_ZERO\\\");\\n        require(\\n            IERC20(address(optionToken)).balanceOf(msg.sender) >= closeQuantity,\\n            \\\"ERR_BAL_OPTIONS\\\"\\n        );\\n\\n        // Calculate the quantity of redeemTokens that need to be burned. (What we mean by Implicit).\\n        uint256 inputRedeems = closeQuantity\\n            .mul(optionToken.getQuoteValue())\\n            .div(optionToken.getBaseValue());\\n        require(\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\n                inputRedeems,\\n            \\\"ERR_BAL_REDEEM\\\"\\n        );\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\n            msg.sender,\\n            address(optionToken),\\n            inputRedeems\\n        );\\n        IERC20(address(optionToken)).safeTransferFrom(\\n            msg.sender,\\n            address(optionToken),\\n            closeQuantity\\n        );\\n\\n        uint256 inputOptions;\\n        uint256 outUnderlyings;\\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\\n            receiver\\n        );\\n        return (inputRedeems, inputOptions, outUnderlyings);\\n    }\\n\\n    /**\\n     * @dev Burn redeemTokens to withdraw underlyingTokens and strikeTokens from expired options.\\n     * @param optionToken The address of the option contract.\\n     * @param unwindQuantity Quantity of option tokens used to calculate the amount of redeem tokens to burn.\\n     * @param receiver The underlyingTokens are sent to the receiver address and the redeemTokens are burned.\\n     */\\n    function safeUnwind(\\n        IOption optionToken,\\n        uint256 unwindQuantity,\\n        address receiver\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Checks\\n        require(unwindQuantity > 0, \\\"ERR_ZERO\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        require(\\n            optionToken.getExpiryTime() < block.timestamp,\\n            \\\"ERR_NOT_EXPIRED\\\"\\n        );\\n\\n        // Calculate amount of redeems required\\n        uint256 inputRedeems = unwindQuantity\\n            .mul(optionToken.getQuoteValue())\\n            .div(optionToken.getBaseValue());\\n        require(\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\n                inputRedeems,\\n            \\\"ERR_BAL_REDEEM\\\"\\n        );\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\n            msg.sender,\\n            address(optionToken),\\n            inputRedeems\\n        );\\n\\n        uint256 inputOptions;\\n        uint256 outUnderlyings;\\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\\n            receiver\\n        );\\n\\n        return (inputRedeems, inputOptions, outUnderlyings);\\n    }\\n}\\n\",\"keccak256\":\"0x9aaf2191f88529985f676d9cf21b7ca444a441aacb2552884497b6ccefeca49b\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516118b93803806118b98339818101604052602081101561003357600080fd5b5051600080546001600160a01b0390921661010002610100600160a81b031960ff1990931660011792909216919091179055611845806100746000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063087b063214610067578063154fa089146100b657806320e469d61461010a5780633fc8cef314610140578063a1d8778f14610164578063b8a6bb3b146101ac575b600080fd5b61009d6004803603606081101561007d57600080fd5b506001600160a01b038135811691602081013591604090910135166101e2565b6040805192835260208301919091528051918290030190f35b6100ec600480360360608110156100cc57600080fd5b506001600160a01b038135811691602081013591604090910135166102a5565b60408051938452602084019290925282820152519081900360600190f35b61009d6004803603606081101561012057600080fd5b506001600160a01b03813581169160208101359160409091013516610373565b610148610436565b604080516001600160a01b039092168252519081900360200190f35b61019a6004803603606081101561017a57600080fd5b506001600160a01b0381358116916020810135916040909101351661044a565b60408051918252519081900360200190f35b6100ec600480360360608110156101c257600080fd5b506001600160a01b038135811691602081013591604090910135166104ff565b60008054819060ff1661022a576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff19168155806102408787876105cd565b604080518981526020810184905281519395509193506001600160a01b038a169233927f453315713d2b83893ec1df8cf529328bf25e4fe72b6c4d880edb03243e80119b92908290030190a36000805460ff1916600117905590969095509350505050565b600080548190819060ff166102ef576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff191681558080610306898989610a83565b925092509250886001600160a01b0316336001600160a01b03167fd0c7e26bb5b37129e4f53759eb48fc9e0c4bafd336a94f6b87c5ce9f139183e5846040518082815260200191505060405180910390a36000805460ff1916600117905591989097509095509350505050565b60008054819060ff166103bb576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff19168155806103d1878787610e5a565b604080518381526020810183905281519395509193506001600160a01b038a169233927f58fb17601901d5509bf49bedd00d55850ef2ebff3adb67a5f517b86eed08a0c892908290030190a36000805460ff1916600117905590969095509350505050565b60005461010090046001600160a01b031681565b6000805460ff16610490576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff191681556104a5858585610f27565b6040805182815290519192506001600160a01b0387169133917fd75e50ef6162896bf5efc868c48b0c44d04ab08196d3e2b4c3aba5062c5ce94d919081900360200190a390506000805460ff191660011790559392505050565b600080548190819060ff16610549576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff191681558080610560898989611154565b925092509250886001600160a01b0316336001600160a01b03167f602dc153bc8f9d064b879f6bc973338b7c009689b9cacc58a250c3fb3da51808846040518082815260200191505060405180910390a36000805460ff1916600117905591989097509095509350505050565b60008060008411610610576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b604080516370a0823160e01b8152336004820152905185916001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561065957600080fd5b505afa15801561066d573d6000803e3d6000fd5b505050506040513d602081101561068357600080fd5b505110156106ca576040805162461bcd60e51b815260206004820152600f60248201526e4552525f42414c5f4f5054494f4e5360881b604482015290519081900360640190fd5b60006107bc866001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d602081101561073257600080fd5b505160408051627f0cfd60e11b815290516107b0916001600160a01b038b169162fe19fa91600480820192602092909190829003018186803b15801561077757600080fd5b505afa15801561078b573d6000803e3d6000fd5b505050506040513d60208110156107a157600080fd5b5051889063ffffffff61140a16565b9063ffffffff61146c16565b905080866001600160a01b031663a1a407616040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d602081101561082257600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d602081101561089657600080fd5b505110156108dc576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f535452494b4560901b604482015290519081900360640190fd5b61095e338783896001600160a01b031663a1a407616040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b505afa15801561092f573d6000803e3d6000fd5b505050506040513d602081101561094557600080fd5b50516001600160a01b031692919063ffffffff6114ae16565b6109796001600160a01b03871633888863ffffffff6114ae16565b6040805160008082526020820192839052630787eae360e41b83526001600160a01b0387811660248401908152604484018a90526060606485019081528451608486018190529395928c169463787eae30948b948d9492939160a4850191908083838d5b838110156109f55781810151838201526020016109dd565b50505050905090810190601f168015610a225780820380516001836020036101000a031916815260200191505b509450505050506040805180830381600087803b158015610a4257600080fd5b505af1158015610a56573d6000803e3d6000fd5b505050506040513d6040811015610a6c57600080fd5b508051602090910151909890975095505050505050565b6000806000808511610ac7576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b42866001600160a01b03166325cb5bc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0157600080fd5b505afa158015610b15573d6000803e3d6000fd5b505050506040513d6020811015610b2b57600080fd5b505110610b71576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d1561412549151608a1b604482015290519081900360640190fd5b6000610c57876001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b158015610baf57600080fd5b505afa158015610bc3573d6000803e3d6000fd5b505050506040513d6020811015610bd957600080fd5b505160408051627f0cfd60e11b815290516107b0916001600160a01b038c169162fe19fa91600480820192602092909190829003018186803b158015610c1e57600080fd5b505afa158015610c32573d6000803e3d6000fd5b505050506040513d6020811015610c4857600080fd5b5051899063ffffffff61140a16565b905080876001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d6020811015610cbd57600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d0757600080fd5b505afa158015610d1b573d6000803e3d6000fd5b505050506040513d6020811015610d3157600080fd5b50511015610d77576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f52454445454d60901b604482015290519081900360640190fd5b610db63388838a6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b600080886001600160a01b03166383499805886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050606060405180830381600087803b158015610e1157600080fd5b505af1158015610e25573d6000803e3d6000fd5b505050506040513d6060811015610e3b57600080fd5b5080516020820151604090920151909b919a5098509650505050505050565b60008060008411610e9d576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b610edc338686886001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b60408051633ea6b5f160e21b81526001600160a01b03858116600483015282516000938493928a169263fa9ad7c4926024808301939282900301818787803b158015610a4257600080fd5b6000808311610f68576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b82846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d6020811015610fcc57600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561101657600080fd5b505afa15801561102a573d6000803e3d6000fd5b505050506040513d602081101561104057600080fd5b50511015611086576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f52454445454d60901b604482015290519081900360640190fd5b6110c5338585876001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b6000846001600160a01b0316635e86929d846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506040513d602081101561114957600080fd5b505195945050505050565b6000806000808511611198576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b604080516370a0823160e01b8152336004820152905186916001600160a01b038916916370a0823191602480820192602092909190829003018186803b1580156111e157600080fd5b505afa1580156111f5573d6000803e3d6000fd5b505050506040513d602081101561120b57600080fd5b50511015611252576040805162461bcd60e51b815260206004820152600f60248201526e4552525f42414c5f4f5054494f4e5360881b604482015290519081900360640190fd5b6000611290876001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b158015610baf57600080fd5b905080876001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d60208110156112f657600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d602081101561136a57600080fd5b505110156113b0576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f52454445454d60901b604482015290519081900360640190fd5b6113ef3388838a6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b610db66001600160a01b03881633898963ffffffff6114ae16565b60008261141957506000611466565b8282028284828161142657fe5b04146114635760405162461bcd60e51b81526004018080602001828103825260218152602001806117c56021913960400191505060405180910390fd5b90505b92915050565b600061146383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061150e565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526115089085906115b0565b50505050565b6000818361159a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561155f578181015183820152602001611547565b50505050905090810190601f16801561158c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816115a657fe5b0495945050505050565b6115c2826001600160a01b0316611768565b611613576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106116515780518252601f199092019160209182019101611632565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146116b3576040519150601f19603f3d011682016040523d82523d6000602084013e6116b8565b606091505b50915091508161170f576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156115085780806020019051602081101561172b57600080fd5b50516115085760405162461bcd60e51b815260040180806020018281038252602a8152602001806117e6602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061179c57508115155b94935050505056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212208478890b5d14d5b08cd0e1291d4fb61f2ddfd097099755fc0f6fe4add9c181f364736f6c63430006020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063087b063214610067578063154fa089146100b657806320e469d61461010a5780633fc8cef314610140578063a1d8778f14610164578063b8a6bb3b146101ac575b600080fd5b61009d6004803603606081101561007d57600080fd5b506001600160a01b038135811691602081013591604090910135166101e2565b6040805192835260208301919091528051918290030190f35b6100ec600480360360608110156100cc57600080fd5b506001600160a01b038135811691602081013591604090910135166102a5565b60408051938452602084019290925282820152519081900360600190f35b61009d6004803603606081101561012057600080fd5b506001600160a01b03813581169160208101359160409091013516610373565b610148610436565b604080516001600160a01b039092168252519081900360200190f35b61019a6004803603606081101561017a57600080fd5b506001600160a01b0381358116916020810135916040909101351661044a565b60408051918252519081900360200190f35b6100ec600480360360608110156101c257600080fd5b506001600160a01b038135811691602081013591604090910135166104ff565b60008054819060ff1661022a576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff19168155806102408787876105cd565b604080518981526020810184905281519395509193506001600160a01b038a169233927f453315713d2b83893ec1df8cf529328bf25e4fe72b6c4d880edb03243e80119b92908290030190a36000805460ff1916600117905590969095509350505050565b600080548190819060ff166102ef576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff191681558080610306898989610a83565b925092509250886001600160a01b0316336001600160a01b03167fd0c7e26bb5b37129e4f53759eb48fc9e0c4bafd336a94f6b87c5ce9f139183e5846040518082815260200191505060405180910390a36000805460ff1916600117905591989097509095509350505050565b60008054819060ff166103bb576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff19168155806103d1878787610e5a565b604080518381526020810183905281519395509193506001600160a01b038a169233927f58fb17601901d5509bf49bedd00d55850ef2ebff3adb67a5f517b86eed08a0c892908290030190a36000805460ff1916600117905590969095509350505050565b60005461010090046001600160a01b031681565b6000805460ff16610490576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff191681556104a5858585610f27565b6040805182815290519192506001600160a01b0387169133917fd75e50ef6162896bf5efc868c48b0c44d04ab08196d3e2b4c3aba5062c5ce94d919081900360200190a390506000805460ff191660011790559392505050565b600080548190819060ff16610549576040805162461bcd60e51b815260206004820152601f60248201526000805160206117a5833981519152604482015290519081900360640190fd5b6000805460ff191681558080610560898989611154565b925092509250886001600160a01b0316336001600160a01b03167f602dc153bc8f9d064b879f6bc973338b7c009689b9cacc58a250c3fb3da51808846040518082815260200191505060405180910390a36000805460ff1916600117905591989097509095509350505050565b60008060008411610610576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b604080516370a0823160e01b8152336004820152905185916001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561065957600080fd5b505afa15801561066d573d6000803e3d6000fd5b505050506040513d602081101561068357600080fd5b505110156106ca576040805162461bcd60e51b815260206004820152600f60248201526e4552525f42414c5f4f5054494f4e5360881b604482015290519081900360640190fd5b60006107bc866001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d602081101561073257600080fd5b505160408051627f0cfd60e11b815290516107b0916001600160a01b038b169162fe19fa91600480820192602092909190829003018186803b15801561077757600080fd5b505afa15801561078b573d6000803e3d6000fd5b505050506040513d60208110156107a157600080fd5b5051889063ffffffff61140a16565b9063ffffffff61146c16565b905080866001600160a01b031663a1a407616040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d602081101561082257600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d602081101561089657600080fd5b505110156108dc576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f535452494b4560901b604482015290519081900360640190fd5b61095e338783896001600160a01b031663a1a407616040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b505afa15801561092f573d6000803e3d6000fd5b505050506040513d602081101561094557600080fd5b50516001600160a01b031692919063ffffffff6114ae16565b6109796001600160a01b03871633888863ffffffff6114ae16565b6040805160008082526020820192839052630787eae360e41b83526001600160a01b0387811660248401908152604484018a90526060606485019081528451608486018190529395928c169463787eae30948b948d9492939160a4850191908083838d5b838110156109f55781810151838201526020016109dd565b50505050905090810190601f168015610a225780820380516001836020036101000a031916815260200191505b509450505050506040805180830381600087803b158015610a4257600080fd5b505af1158015610a56573d6000803e3d6000fd5b505050506040513d6040811015610a6c57600080fd5b508051602090910151909890975095505050505050565b6000806000808511610ac7576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b42866001600160a01b03166325cb5bc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0157600080fd5b505afa158015610b15573d6000803e3d6000fd5b505050506040513d6020811015610b2b57600080fd5b505110610b71576040805162461bcd60e51b815260206004820152600f60248201526e11549497d393d517d1561412549151608a1b604482015290519081900360640190fd5b6000610c57876001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b158015610baf57600080fd5b505afa158015610bc3573d6000803e3d6000fd5b505050506040513d6020811015610bd957600080fd5b505160408051627f0cfd60e11b815290516107b0916001600160a01b038c169162fe19fa91600480820192602092909190829003018186803b158015610c1e57600080fd5b505afa158015610c32573d6000803e3d6000fd5b505050506040513d6020811015610c4857600080fd5b5051899063ffffffff61140a16565b905080876001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d6020811015610cbd57600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d0757600080fd5b505afa158015610d1b573d6000803e3d6000fd5b505050506040513d6020811015610d3157600080fd5b50511015610d77576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f52454445454d60901b604482015290519081900360640190fd5b610db63388838a6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b600080886001600160a01b03166383499805886040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050606060405180830381600087803b158015610e1157600080fd5b505af1158015610e25573d6000803e3d6000fd5b505050506040513d6060811015610e3b57600080fd5b5080516020820151604090920151909b919a5098509650505050505050565b60008060008411610e9d576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b610edc338686886001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b60408051633ea6b5f160e21b81526001600160a01b03858116600483015282516000938493928a169263fa9ad7c4926024808301939282900301818787803b158015610a4257600080fd5b6000808311610f68576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b82846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d6020811015610fcc57600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561101657600080fd5b505afa15801561102a573d6000803e3d6000fd5b505050506040513d602081101561104057600080fd5b50511015611086576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f52454445454d60901b604482015290519081900360640190fd5b6110c5338585876001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b6000846001600160a01b0316635e86929d846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506040513d602081101561114957600080fd5b505195945050505050565b6000806000808511611198576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b604080516370a0823160e01b8152336004820152905186916001600160a01b038916916370a0823191602480820192602092909190829003018186803b1580156111e157600080fd5b505afa1580156111f5573d6000803e3d6000fd5b505050506040513d602081101561120b57600080fd5b50511015611252576040805162461bcd60e51b815260206004820152600f60248201526e4552525f42414c5f4f5054494f4e5360881b604482015290519081900360640190fd5b6000611290876001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b158015610baf57600080fd5b905080876001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d60208110156112f657600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d602081101561136a57600080fd5b505110156113b0576040805162461bcd60e51b815260206004820152600e60248201526d4552525f42414c5f52454445454d60901b604482015290519081900360640190fd5b6113ef3388838a6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091b57600080fd5b610db66001600160a01b03881633898963ffffffff6114ae16565b60008261141957506000611466565b8282028284828161142657fe5b04146114635760405162461bcd60e51b81526004018080602001828103825260218152602001806117c56021913960400191505060405180910390fd5b90505b92915050565b600061146383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061150e565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526115089085906115b0565b50505050565b6000818361159a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561155f578181015183820152602001611547565b50505050905090810190601f16801561158c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816115a657fe5b0495945050505050565b6115c2826001600160a01b0316611768565b611613576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106116515780518252601f199092019160209182019101611632565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146116b3576040519150601f19603f3d011682016040523d82523d6000602084013e6116b8565b606091505b50915091508161170f576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156115085780806020019051602081101561172b57600080fd5b50516115085760405162461bcd60e51b815260040180806020018281038252602a8152602001806117e6602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061179c57508115155b94935050505056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212208478890b5d14d5b08cd0e1291d4fb61f2ddfd097099755fc0f6fe4add9c181f364736f6c63430006020033",
  "devdoc": {
    "methods": {
      "safeClose(address,uint256,address)": {
        "details": "Burn optionTokens and redeemTokens to withdraw underlyingTokens.",
        "params": {
          "closeQuantity": "Quantity of optionTokens to burn. (Implictly will burn the strike ratio quantity of redeemTokens).",
          "optionToken": "The address of the option contract.",
          "receiver": "The underlyingTokens are sent to the receiver address."
        }
      },
      "safeExercise(address,uint256,address)": {
        "details": "Swaps strikeTokens to underlyingTokens using the strike ratio as the exchange rate.",
        "params": {
          "exerciseQuantity": "Quantity of optionTokens to exercise.",
          "optionToken": "The address of the option contract.",
          "receiver": "The underlyingTokens are sent to the receiver address."
        }
      },
      "safeMint(address,uint256,address)": {
        "details": "Mint options at a 1:1 ratio with deposited underlying tokens.",
        "params": {
          "mintQuantity": "Quantity of options to mint and underlyingToken to deposit.",
          "optionToken": "The address of the option contract.",
          "receiver": "The newly minted options and redeems are sent to the receiver address."
        }
      },
      "safeRedeem(address,uint256,address)": {
        "details": "Burns redeemTokens to withdraw available strikeTokens.",
        "params": {
          "optionToken": "The address of the option contract.",
          "receiver": "The strikeTokens are sent to the receiver address.",
          "redeemQuantity": "redeemQuantity of redeemTokens to burn."
        }
      },
      "safeUnwind(address,uint256,address)": {
        "details": "Burn redeemTokens to withdraw underlyingTokens and strikeTokens from expired options.",
        "params": {
          "optionToken": "The address of the option contract.",
          "receiver": "The underlyingTokens and redeemTokens are sent to the receiver address.",
          "unwindQuantity": "Quantity of option tokens used to calculate the amount of redeem tokens to burn."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "safeClose(address,uint256,address)": {
        "notice": "The redeemTokens to burn is equal to the optionTokens * strike ratio. inOptions = inRedeems / strike ratio = outUnderlyings"
      },
      "safeExercise(address,uint256,address)": {
        "notice": "Burns optionTokens, option contract receives strikeTokens, user receives underlyingTokens."
      },
      "safeMint(address,uint256,address)": {
        "notice": "Also mints redeems at a strike ratio to the deposited underlyings. Warning: Calls msg.sender with safeTransferFrom."
      },
      "safeRedeem(address,uint256,address)": {
        "notice": "inRedeems = outStrikes."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1351,
        "contract": "contracts/option/extensions/Trader.sol:Trader",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2210,
        "contract": "contracts/option/extensions/Trader.sol:Trader",
        "label": "weth",
        "offset": 1,
        "slot": "0",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}