{
  "address": "0xccAc85a39478A550e97d6ce712Cef41431165B4C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strikeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "calculateOptionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "consData",
          "type": "bytes"
        }
      ],
      "name": "cloneConstructor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strikeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "base",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "deployClone",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployOptionTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemAddress",
          "type": "address"
        }
      ],
      "name": "initRedeemToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a7190947f3a83a9f0aaee560ea8e5bcf8864c334bbbaee8ec877c941e0e5dbd",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0xccAc85a39478A550e97d6ce712Cef41431165B4C",
    "transactionIndex": 3,
    "gasUsed": "703452",
    "logsBloom": "0x
    "blockHash": "0xe177f24d95d83fb44781d4f4bd3b649720d83238ec38d8b7ed2ebe2d6281804a",
    "transactionHash": "0x8a7190947f3a83a9f0aaee560ea8e5bcf8864c334bbbaee8ec877c941e0e5dbd",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 23890303,
        "transactionHash": "0x8a7190947f3a83a9f0aaee560ea8e5bcf8864c334bbbaee8ec877c941e0e5dbd",
        "address": "0xccAc85a39478A550e97d6ce712Cef41431165B4C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xe177f24d95d83fb44781d4f4bd3b649720d83238ec38d8b7ed2ebe2d6281804a"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23890303,
        "transactionHash": "0x8a7190947f3a83a9f0aaee560ea8e5bcf8864c334bbbaee8ec877c941e0e5dbd",
        "address": "0xccAc85a39478A550e97d6ce712Cef41431165B4C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7",
          "0x00000000000000000000000076582d77c4e9e14e5a95429e9c18c3780eab38fb"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xe177f24d95d83fb44781d4f4bd3b649720d83238ec38d8b7ed2ebe2d6281804a"
      }
    ],
    "blockNumber": 23890303,
    "cumulativeGasUsed": "851314",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x76582d77C4e9e14e5A95429E9C18C3780eaB38fB"
  ],
  "solcInputHash": "e8df3bbc9cd68519fa878cebbe263f7f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateOptionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"consData\",\"type\":\"bytes\"}],\"name\":\"cloneConstructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strikeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"deployClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployOptionTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemAddress\",\"type\":\"address\"}],\"name\":\"initRedeemToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"calculateOptionAddress(address,address,uint256,uint256,uint256)\":{\"details\":\"Calculates the option token's address using the five option parameters.\",\"returns\":{\"_0\":\"The address of the option with the parameter arguments.\"}},\"deployClone(address,address,uint256,uint256,uint256)\":{\"details\":\"Deploys a create2 clone of the option template contract.\",\"params\":{\"base\":\"The quantity of underlying tokens per unit of quote amount of strike tokens.\",\"expiry\":\"The unix timestamp for option expiry.\",\"quote\":\"The quantity of strike tokens per unit of base amount of underlying tokens.\",\"strikeToken\":\"The address of the strike ERC-20 token.\",\"underlyingToken\":\"The address of the underlying ERC-20 token.\"}},\"deployOptionTemplate()\":{\"details\":\"Deploys the bytecode for the Option contract.\"},\"initRedeemToken(address,address)\":{\"details\":\"Only the factory can call the initRedeemToken function to set the redeem token address. This function is only callable by the Registry contract (the owner).\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/option/applications/factories/OptionFactory.sol\":\"OptionFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x0de74dfa6b37943c1b834cbd8fb7a8d052e5ff80c7adb33692102dd6cd2985e9\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x9a8c691b81a4a48adbbd5b010faa56a168c189e711495c16347d93b60b805f82\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x3211de52f707a62a356a34fdea9d6a7bed46402d5ce45f1891a16fe2132fbb47\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(bytes20(_data << 96));\\n    }\\n}\\n\",\"keccak256\":\"0x66d1ed2a353be8d2492833a185c53a8f1de8d8fa575a201e9825cf334d79659a\"},\"contracts/option/applications/NullCloneConstructor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.2;\\n\\ncontract NullCloneConstructor {\\n    // solhint-disable-next-line no-empty-blocks\\n    function cloneConstructor(bytes memory consData) public {\\n        // blank\\n    }\\n}\\n\",\"keccak256\":\"0xe414f596216626df60bab6007988f863b661e7f954e08e5c57391989f531f102\"},\"contracts/option/applications/factories/OptionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title Factory for deploying option contracts.\\r\\n * @author Primitive\\r\\n */\\r\\n\\r\\nimport { Option, SafeMath } from \\\"../../primitives/Option.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { OptionTemplateLib } from \\\"../../libraries/OptionTemplateLib.sol\\\";\\r\\nimport { NullCloneConstructor } from \\\"../NullCloneConstructor.sol\\\";\\r\\nimport { CloneLib } from \\\"../../libraries/CloneLib.sol\\\";\\r\\nimport { IOptionFactory } from \\\"../../interfaces/IOptionFactory.sol\\\";\\r\\n\\r\\ncontract OptionFactory is IOptionFactory, Ownable, NullCloneConstructor {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public override optionTemplate;\\r\\n\\r\\n    constructor(address registry) public {\\r\\n        transferOwnership(registry);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys the bytecode for the Option contract.\\r\\n     */\\r\\n    function deployOptionTemplate() public override {\\r\\n        optionTemplate = OptionTemplateLib.deployTemplate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deploys a create2 clone of the option template contract.\\r\\n     * @param underlyingToken The address of the underlying ERC-20 token.\\r\\n     * @param strikeToken The address of the strike ERC-20 token.\\r\\n     * @param base The quantity of underlying tokens per unit of quote amount of strike tokens.\\r\\n     * @param quote The quantity of strike tokens per unit of base amount of underlying tokens.\\r\\n     * @param expiry The unix timestamp for option expiry.\\r\\n     */\\r\\n    function deployClone(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external override onlyOwner returns (address) {\\r\\n        require(optionTemplate != address(0x0), \\\"ERR_NO_DEPLOYED_TEMPLATE\\\");\\r\\n\\r\\n        // Calculates the salt for create2.\\r\\n        bytes32 salt = keccak256(\\r\\n            abi.encodePacked(\\r\\n                OptionTemplateLib.OPTION_SALT(),\\r\\n                underlyingToken,\\r\\n                strikeToken,\\r\\n                base,\\r\\n                quote,\\r\\n                expiry\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Deploys the clone using the template contract and calculated salt.\\r\\n        address optionAddress = CloneLib.create2Clone(\\r\\n            optionTemplate,\\r\\n            uint256(salt)\\r\\n        );\\r\\n\\r\\n        // Sets the initial state of the option with the parameter arguments.\\r\\n        Option(optionAddress).initialize(\\r\\n            underlyingToken,\\r\\n            strikeToken,\\r\\n            base,\\r\\n            quote,\\r\\n            expiry\\r\\n        );\\r\\n\\r\\n        return optionAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only the factory can call the initRedeemToken function to set the redeem token address.\\r\\n     * This function is only callable by the Registry contract (the owner).\\r\\n     */\\r\\n    function initRedeemToken(address optionAddress, address redeemAddress)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        Option(optionAddress).initRedeemToken(redeemAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the option token's address using the five option parameters.\\r\\n     * @return The address of the option with the parameter arguments.\\r\\n     */\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external override view returns (address) {\\r\\n        // Calculates the salt using the parameter arguments and the salt used in the template contract\\r\\n        // create2 deployment.\\r\\n        bytes32 salt = keccak256(\\r\\n            abi.encodePacked(\\r\\n                OptionTemplateLib.OPTION_SALT(),\\r\\n                underlyingToken,\\r\\n                strikeToken,\\r\\n                base,\\r\\n                quote,\\r\\n                expiry\\r\\n            )\\r\\n        );\\r\\n        address optionAddress = CloneLib.deriveInstanceAddress(\\r\\n            optionTemplate,\\r\\n            salt\\r\\n        );\\r\\n        return optionAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7719a6f6afd8f6174230b87b8ff9e417218b26a45604bbd3ddd7011eef00069b\"},\"contracts/option/interfaces/IFlash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IFlash {\\r\\n    function primitiveFlash(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7caaea0111eb7c370eb36f59936e916a7998ceb17dd5f754707e9435f1cec133\"},\"contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"contracts/option/interfaces/IOptionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IOptionFactory {\\r\\n    function deployClone(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external returns (address);\\r\\n\\r\\n    function initRedeemToken(address optionAddress, address redeemAddress)\\r\\n        external;\\r\\n\\r\\n    function deployOptionTemplate() external;\\r\\n\\r\\n    function optionTemplate() external returns (address);\\r\\n\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x523335d4aa7b9895d0afd9dbc14e3f3356a1d64827a6f90571c08aef54fe5a3c\"},\"contracts/option/interfaces/IRedeem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IRedeem is IERC20 {\\r\\n    function optionToken() external view returns (address);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function mint(address user, uint256 amount) external;\\r\\n\\r\\n    function burn(address user, uint256 amount) external;\\r\\n\\r\\n    function initialize(address _factory, address _optionToken) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6e70ad4936ffe65300a55942aed61e27b70abc284c17e32f1ac53782c8e7ec50\"},\"contracts/option/libraries/CloneLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Create2 Clone Factory Library\\n * @author Alan Lu, Gnosis.\\n *         Raymond Pulver IV.\\n */\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nlibrary CloneLib {\\n    /**\\n     * @dev Calls internal creation computation function.\\n     */\\n    function computeCreationCode(address target)\\n        internal\\n        view\\n        returns (bytes memory clone)\\n    {\\n        clone = computeCreationCode(address(this), target);\\n    }\\n\\n    /**\\n     * @dev Computes the Clone's creation code.\\n     */\\n    function computeCreationCode(address deployer, address target)\\n        internal\\n        pure\\n        returns (bytes memory clone)\\n    {\\n        bytes memory consData = abi.encodeWithSignature(\\n            \\\"cloneConstructor(bytes)\\\",\\n            new bytes(0)\\n        );\\n        clone = new bytes(99 + consData.length);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(\\n                add(clone, 0x20),\\n                0x3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe\\n            )\\n            mstore(\\n                add(clone, 0x2d),\\n                mul(deployer, 0x01000000000000000000000000)\\n            )\\n            mstore(\\n                add(clone, 0x41),\\n                0x5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be\\n            )\\n            mstore(add(clone, 0x60), mul(target, 0x01000000000000000000000000))\\n            mstore(\\n                add(clone, 116),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n        }\\n        for (uint256 i = 0; i < consData.length; i++) {\\n            clone[i + 99] = consData[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calls Open Zeppelin's Create2.computeAddress() to get an address for the clone.\\n     */\\n    function deriveInstanceAddress(address target, bytes32 salt)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(computeCreationCode(target))\\n            );\\n    }\\n\\n    /**\\n     * @dev Calls Open Zeppelin's Create2.computeAddress() to get an address for the clone.\\n     */\\n    function deriveInstanceAddress(\\n        address from,\\n        address target,\\n        bytes32 salt\\n    ) internal pure returns (address) {\\n        return\\n            Create2.computeAddress(\\n                salt,\\n                keccak256(computeCreationCode(from, target)),\\n                from\\n            );\\n    }\\n\\n    /**\\n     * @dev Computs creation code, and then instantiates it with create2.\\n     */\\n    function create2Clone(address target, uint256 saltNonce)\\n        internal\\n        returns (address result)\\n    {\\n        bytes memory clone = computeCreationCode(target);\\n        bytes32 salt = bytes32(saltNonce);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let len := mload(clone)\\n            let data := add(clone, 0x20)\\n            result := create2(0, data, len, salt)\\n        }\\n\\n        require(result != address(0), \\\"ERR_CREATE2_FAIL\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x940f658c7be6a0b8ba66318c957b6eb4e275cd0cc77235ad92b1b7a59924daba\"},\"contracts/option/libraries/OptionTemplateLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport { Option } from \\\"../primitives/Option.sol\\\";\\n\\nlibrary OptionTemplateLib {\\n    // solhint-disable-next-line max-line-length\\n    bytes32\\n        private constant _OPTION_SALT = 0x56f3a99c8e36689645460020839ea1340cbbb2e507b7effe3f180a89db85dd87; // keccak(\\\"primitive-option\\\")\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function OPTION_SALT() internal pure returns (bytes32) {\\n        return _OPTION_SALT;\\n    }\\n\\n    /**\\n     * @dev Deploys a clone of the deployed Option.sol contract.\\n     */\\n    function deployTemplate() external returns (address implementationAddress) {\\n        bytes memory creationCode = type(Option).creationCode;\\n        implementationAddress = Create2.deploy(0, _OPTION_SALT, creationCode);\\n    }\\n}\\n\",\"keccak256\":\"0x3f82941e049fe2fb32871d25124ff53bb961771634ffb6821d43c3510d5afcac\"},\"contracts/option/primitives/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Modifies name, symbol, and decimals by deleting them. Implemented as constants in parent contract.\\n */\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        virtual\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    /* function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    } */\\n\\n    // ======= WARNING: ADDED FUNCTIONS =========\\n\\n    /* function _setupName(string memory name_) internal {\\n        _name = name_;\\n    }\\n\\n    function _setupSymbol(string memory symbol_) internal {\\n        _symbol = symbol_;\\n    } */\\n\\n    // ======= END ADDED FUNCTIONS =========\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x68706b9034a11e5d712983b80ece864d826e43b3f74580c6e1b59173e9adad36\"},\"contracts/option/primitives/Option.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Vanilla Option Token\\r\\n * @notice  This is a low-level contract that is designed to be interacted with by\\r\\n *          other sophisticated smart contracts which have important safety checks,\\r\\n *          and not by externally owned accounts.\\r\\n *          Incorrect usage through direct interaction from externally owned accounts\\r\\n *          can lead to the loss of funds.\\r\\n *          Use Primitive's Trader.sol contract to interact with this contract safely.\\r\\n * @author  Primitive\\r\\n */\\r\\n\\r\\nimport { IOption } from \\\"../interfaces/IOption.sol\\\";\\r\\nimport { IRedeem } from \\\"../interfaces/IRedeem.sol\\\";\\r\\nimport { IFlash } from \\\"../interfaces/IFlash.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport { ERC20 } from \\\"./ERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\ncontract Option is IOption, ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct OptionParameters {\\r\\n        address underlyingToken;\\r\\n        address strikeToken;\\r\\n        uint256 base;\\r\\n        uint256 quote;\\r\\n        uint256 expiry;\\r\\n    }\\r\\n\\r\\n    OptionParameters public optionParameters;\\r\\n\\r\\n    // solhint-disable-next-line const-name-snakecase\\r\\n    uint256 public override underlyingCache;\\r\\n    uint256 public override strikeCache;\\r\\n    address public override redeemToken;\\r\\n    address public override factory;\\r\\n    bool private _notEntered;\\r\\n\\r\\n    string public constant name = \\\"Primitive V1 Option\\\";\\r\\n    string public constant symbol = \\\"PRM\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    event Mint(address indexed from, uint256 outOptions, uint256 outRedeems);\\r\\n    event Exercise(\\r\\n        address indexed from,\\r\\n        uint256 outUnderlyings,\\r\\n        uint256 inStrikes\\r\\n    );\\r\\n    event Redeem(address indexed from, uint256 inRedeems);\\r\\n    event Close(address indexed from, uint256 outUnderlyings);\\r\\n    event UpdatedCacheBalances(uint256 underlyingCache, uint256 strikeCache);\\r\\n    event InitializedRedeem(\\r\\n        address indexed caller,\\r\\n        address indexed redeemToken\\r\\n    );\\r\\n\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    constructor() public {}\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the intial state for the contract. Only called immediately after deployment.\\r\\n     * @param underlyingToken The address of the underlying asset.\\r\\n     * @param strikeToken The address of the strike asset.\\r\\n     * @param base The quantity of underlying tokens per quote amount of strike tokens.\\r\\n     * @param quote The quantity of strike tokens per base amount of underlying tokens.\\r\\n     * @param expiry The expiration date for the option.\\r\\n     */\\r\\n    function initialize(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) public {\\r\\n        require(factory == address(0x0), \\\"ERR_IS_INITIALIZED\\\");\\r\\n        require(underlyingToken != strikeToken, \\\"ERR_SAME_ASSETS\\\");\\r\\n        require(base > 0, \\\"ERR_BASE_ZERO\\\");\\r\\n        require(quote > 0, \\\"ERR_QUOTE_ZERO\\\");\\r\\n        require(expiry >= block.timestamp, \\\"ERR_EXPIRY\\\");\\r\\n        factory = msg.sender;\\r\\n        optionParameters = OptionParameters(\\r\\n            underlyingToken,\\r\\n            strikeToken,\\r\\n            base,\\r\\n            quote,\\r\\n            expiry\\r\\n        );\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    modifier notExpired {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(isNotExpired(), \\\"ERR_EXPIRED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called after the option contract is initialized, and a redeem token has been deployed.\\r\\n     * @notice Entangles a redeem token to this option contract permanently.\\r\\n     * @param redeemToken_ The address of the redeem token.\\r\\n     */\\r\\n    function initRedeemToken(address redeemToken_) external override {\\r\\n        require(msg.sender == factory, \\\"ERR_NOT_OWNER\\\");\\r\\n        require(redeemToken == address(0x0), \\\"ERR_REDEEM_INITIALIZED\\\");\\r\\n        redeemToken = redeemToken_;\\r\\n        emit InitializedRedeem(msg.sender, redeemToken_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the cached balances to match the actual current balances.\\r\\n     * Attempting to transfer tokens to this contract directly, in a separate transaction,\\r\\n     * is incorrect and could result in loss of funds. Calling this function will permanently lock any excess\\r\\n     * underlying or strike tokens which were erroneously sent to this contract.\\r\\n     */\\r\\n    function updateCacheBalances() external override nonReentrant {\\r\\n        _updateCacheBalances(\\r\\n            IERC20(optionParameters.underlyingToken).balanceOf(address(this)),\\r\\n            IERC20(optionParameters.strikeToken).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the cache balances to new values.\\r\\n     */\\r\\n    function _updateCacheBalances(\\r\\n        uint256 underlyingBalance,\\r\\n        uint256 strikeBalance\\r\\n    ) private {\\r\\n        underlyingCache = underlyingBalance;\\r\\n        strikeCache = strikeBalance;\\r\\n        emit UpdatedCacheBalances(underlyingBalance, strikeBalance);\\r\\n    }\\r\\n\\r\\n    /* === STATE MUTABLE === */\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * Mints optionTokens at a 1:1 ratio to underlyingToken deposits. Also mints Redeem tokens at a base:quote ratio.\\r\\n     * @notice inUnderlyings = outOptionTokens. inUnderlying / strike ratio = outRedeemTokens.\\r\\n     * @param receiver The newly minted tokens are sent to the receiver address.\\r\\n     */\\r\\n    function mintOptions(address receiver)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        notExpired\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        // Save on gas because this variable is used twice.\\r\\n        uint256 underlyingBalance = IERC20(optionParameters.underlyingToken)\\r\\n            .balanceOf(address(this));\\r\\n\\r\\n        // Mint optionTokens equal to the difference between current and cached balance of underlyingTokens.\\r\\n        uint256 inUnderlyings = underlyingBalance.sub(underlyingCache);\\r\\n\\r\\n        // Calculate the quantity of redeemTokens to mint.\\r\\n        uint256 outRedeems = inUnderlyings.mul(optionParameters.quote).div(\\r\\n            optionParameters.base\\r\\n        );\\r\\n        require(outRedeems > 0, \\\"ERR_ZERO\\\");\\r\\n\\r\\n        // Mint the optionTokens and redeemTokens.\\r\\n        IRedeem(redeemToken).mint(receiver, outRedeems);\\r\\n        _mint(receiver, inUnderlyings);\\r\\n\\r\\n        // Update the underlyingCache.\\r\\n        _updateCacheBalances(underlyingBalance, strikeCache);\\r\\n        emit Mint(msg.sender, inUnderlyings, outRedeems);\\r\\n        return (inUnderlyings, outRedeems);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * Sends out underlyingTokens then checks to make sure they are returned or paid for.\\r\\n     * This function enables flash exercises and flash loans. Only smart contracts who implement\\r\\n     * their own IFlash interface should be calling this function to initiate a flash exercise/loan.\\r\\n     * @notice If the underlyingTokens are returned, only the fee has to be paid.\\r\\n     * @param receiver The outUnderlyings are sent to the receiver address.\\r\\n     * @param outUnderlyings Quantity of underlyingTokens to safeTransfer to receiver optimistically.\\r\\n     * @param data Passing in any abritrary data will trigger the flash exercise callback function.\\r\\n     */\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external override nonReentrant notExpired returns (uint256, uint256) {\\r\\n        // Store the cached balances and token addresses in memory.\\r\\n        address underlyingToken = optionParameters.underlyingToken;\\r\\n        //(uint256 _underlyingCache, uint256 _strikeCache) = getCacheBalances();\\r\\n\\r\\n        // Require outUnderlyings > 0 and balance of underlyings >= outUnderlyings.\\r\\n        require(outUnderlyings > 0, \\\"ERR_ZERO\\\");\\r\\n        require(\\r\\n            IERC20(underlyingToken).balanceOf(address(this)) >= outUnderlyings,\\r\\n            \\\"ERR_BAL_UNDERLYING\\\"\\r\\n        );\\r\\n\\r\\n        // Optimistically safeTransfer out underlyingTokens.\\r\\n        IERC20(underlyingToken).safeTransfer(receiver, outUnderlyings);\\r\\n        if (data.length > 0)\\r\\n            IFlash(receiver).primitiveFlash(msg.sender, outUnderlyings, data);\\r\\n\\r\\n        // Store in memory for gas savings.\\r\\n        uint256 strikeBalance = IERC20(optionParameters.strikeToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // Calculate the differences.\\r\\n        uint256 inStrikes = strikeBalance.sub(strikeCache);\\r\\n        uint256 inUnderlyings = underlyingBalance.sub(\\r\\n            underlyingCache.sub(outUnderlyings)\\r\\n        ); // will be > 0 if underlyingTokens are returned.\\r\\n\\r\\n        // Either underlyingTokens or strikeTokens must be sent into the contract.\\r\\n        require(inStrikes > 0 || inUnderlyings > 0, \\\"ERR_ZERO\\\");\\r\\n\\r\\n        // Calculate the remaining amount of underlyingToken that needs to be paid for.\\r\\n        uint256 remainder = inUnderlyings > outUnderlyings\\r\\n            ? 0\\r\\n            : outUnderlyings.sub(inUnderlyings);\\r\\n\\r\\n        // Calculate the expected payment of strikeTokens.\\r\\n        uint256 payment = remainder.mul(optionParameters.quote).div(\\r\\n            optionParameters.base\\r\\n        );\\r\\n\\r\\n        // Assumes the cached optionToken balance is 0, which is what it should be.\\r\\n        uint256 inOptions = balanceOf(address(this));\\r\\n\\r\\n        // Enforce the invariants.\\r\\n        require(inStrikes >= payment, \\\"ERR_STRIKES_INPUT\\\");\\r\\n        require(inOptions >= remainder, \\\"ERR_OPTIONS_INPUT\\\");\\r\\n\\r\\n        // Burn the optionTokens at a 1:1 ratio to outUnderlyings.\\r\\n        _burn(address(this), inOptions);\\r\\n\\r\\n        // Update the cached balances.\\r\\n        _updateCacheBalances(underlyingBalance, strikeBalance);\\r\\n        emit Exercise(msg.sender, outUnderlyings, inStrikes);\\r\\n        return (inStrikes, inOptions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * Burns redeemTokens to withdraw strikeTokens at a ratio of 1:1.\\r\\n     * @notice inRedeemTokens = outStrikeTokens. Only callable when strikeTokens are in the contract.\\r\\n     * @param receiver The inRedeems quantity of strikeTokens are sent to the receiver address.\\r\\n     */\\r\\n    function redeemStrikeTokens(address receiver)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        address strikeToken = optionParameters.strikeToken;\\r\\n        address _redeemToken = redeemToken;\\r\\n        uint256 strikeBalance = IERC20(strikeToken).balanceOf(address(this));\\r\\n        uint256 inRedeems = IERC20(_redeemToken).balanceOf(address(this));\\r\\n\\r\\n        // Difference between redeemTokens balance and cache.\\r\\n        require(inRedeems > 0, \\\"ERR_ZERO\\\");\\r\\n        require(strikeBalance >= inRedeems, \\\"ERR_BAL_STRIKE\\\");\\r\\n\\r\\n        // Burn redeemTokens in the contract. Send strikeTokens to receiver.\\r\\n        IRedeem(_redeemToken).burn(address(this), inRedeems);\\r\\n        IERC20(strikeToken).safeTransfer(receiver, inRedeems);\\r\\n\\r\\n        // Current balances.\\r\\n        strikeBalance = IERC20(strikeToken).balanceOf(address(this));\\r\\n\\r\\n        // Update the cached balances.\\r\\n        _updateCacheBalances(underlyingCache, strikeBalance);\\r\\n        emit Redeem(msg.sender, inRedeems);\\r\\n        return inRedeems;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Warning: This low-level function should be called from a contract which performs important safety checks.\\r\\n     * This function should never be called directly by an externally owned account.\\r\\n     * A sophsticated smart contract should make the important checks to make sure the correct amount of tokens\\r\\n     * are transferred into this contract prior to the function call. If an incorrect amount of tokens are transferred\\r\\n     * into this contract, and this function is called, it can result in the loss of funds.\\r\\n     * If the option has expired, burn redeem tokens to withdraw underlying tokens.\\r\\n     * If the option is not expired, burn option and redeem tokens to withdraw underlying tokens.\\r\\n     * @notice inRedeemTokens / strike ratio = outUnderlyingTokens && inOptionTokens >= outUnderlyingTokens.\\r\\n     * @param receiver The outUnderlyingTokens are sent to the receiver address.\\r\\n     */\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // Stores addresses and balances locally for gas savings.\\r\\n        address underlyingToken = optionParameters.underlyingToken;\\r\\n        address _redeemToken = redeemToken;\\r\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        uint256 optionBalance = balanceOf(address(this));\\r\\n        uint256 inRedeems = IERC20(_redeemToken).balanceOf(address(this));\\r\\n\\r\\n        // The quantity of underlyingToken to send out it still determined by the quantity of inRedeems.\\r\\n        // inRedeems is in units of strikeTokens, which is converted to underlyingTokens\\r\\n        // by multiplying inRedeems by the strike ratio, which is base / quote.\\r\\n        // This outUnderlyings quantity is checked against inOptions.\\r\\n        // inOptions must be greater than or equal to outUnderlyings (1 option burned per 1 underlying purchased).\\r\\n        // optionBalance must be greater than or equal to outUnderlyings.\\r\\n        // Neither inRedeems or inOptions can be zero.\\r\\n        uint256 outUnderlyings = inRedeems.mul(optionParameters.base).div(\\r\\n            optionParameters.quote\\r\\n        );\\r\\n\\r\\n        // Assumes the cached balance is 0 so inOptions = balance of optionToken.\\r\\n        // If optionToken is expired, optionToken does not need to be sent in. Only redeemToken.\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        uint256 inOptions = isNotExpired() ? optionBalance : outUnderlyings;\\r\\n        require(inRedeems > 0 && inOptions > 0, \\\"ERR_ZERO\\\");\\r\\n        require(\\r\\n            inOptions >= outUnderlyings && underlyingBalance >= outUnderlyings,\\r\\n            \\\"ERR_BAL_UNDERLYING\\\"\\r\\n        );\\r\\n\\r\\n        // Burn optionTokens. optionTokens are only sent into contract when not expired.\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        if (isNotExpired()) {\\r\\n            _burn(address(this), inOptions);\\r\\n        }\\r\\n\\r\\n        // Send underlyingTokens to user.\\r\\n        // Burn redeemTokens held in the contract.\\r\\n        // User does not receive extra underlyingTokens if there was extra optionTokens in the contract.\\r\\n        // User receives outUnderlyings proportional to inRedeems.\\r\\n        IRedeem(_redeemToken).burn(address(this), inRedeems);\\r\\n        IERC20(underlyingToken).safeTransfer(receiver, outUnderlyings);\\r\\n\\r\\n        // Current balances of underlyingToken and redeemToken.\\r\\n        underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\\r\\n\\r\\n        // Update the cached balances.\\r\\n        _updateCacheBalances(underlyingBalance, strikeCache);\\r\\n        emit Close(msg.sender, outUnderlyings);\\r\\n        return (inRedeems, inOptions, outUnderlyings);\\r\\n    }\\r\\n\\r\\n    /* === VIEW === */\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the previously saved balances of underlying and strike tokens.\\r\\n     */\\r\\n    function getCacheBalances()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        return (underlyingCache, strikeCache);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the underlying, strike, and redeem token addresses.\\r\\n     */\\r\\n    function getAssetAddresses()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            optionParameters.underlyingToken,\\r\\n            optionParameters.strikeToken,\\r\\n            redeemToken\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the strike token address.\\r\\n     */\\r\\n    function getStrikeTokenAddress() public override view returns (address) {\\r\\n        return optionParameters.strikeToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the underlying token address.\\r\\n     */\\r\\n    function getUnderlyingTokenAddress()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return optionParameters.underlyingToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the base value option parameter.\\r\\n     */\\r\\n    function getBaseValue() public override view returns (uint256) {\\r\\n        return optionParameters.base;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the quote value option parameter.\\r\\n     */\\r\\n    function getQuoteValue() public override view returns (uint256) {\\r\\n        return optionParameters.quote;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the expiry timestamp option parameter.\\r\\n     */\\r\\n    function getExpiryTime() public override view returns (uint256) {\\r\\n        return optionParameters.expiry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the option parameters and redeem token address.\\r\\n     */\\r\\n    function getParameters()\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        )\\r\\n    {\\r\\n        OptionParameters memory _optionParameters = optionParameters;\\r\\n        _underlyingToken = _optionParameters.underlyingToken;\\r\\n        _strikeToken = _optionParameters.strikeToken;\\r\\n        _redeemToken = redeemToken;\\r\\n        _base = _optionParameters.base;\\r\\n        _quote = _optionParameters.quote;\\r\\n        _expiry = _optionParameters.expiry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to check if the option is expired.\\r\\n     */\\r\\n    function isNotExpired() internal view returns (bool) {\\r\\n        return optionParameters.expiry >= block.timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x25d1b63eb6a225b4b99113e08a6ba78eaf7ac6e92d087c15a440ebf7ab085989\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d12380380610d128339818101604052602081101561003357600080fd5b505160006100486001600160e01b0361009816565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020610cf2833981519152908290a350610092816001600160e01b0361009c16565b5061019d565b3390565b6100ad6001600160e01b0361009816565b6000546001600160a01b0390811691161461010f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166101545760405162461bcd60e51b8152600401808060200182810382526026815260200180610ccc6026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020610cf283398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610b20806101ac6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101d45780638dd7cc90146101dc578063b570eed8146101e4578063d604a1ef146101ec578063f2fde38b1461022e57610093565b80632e53926d1461009857806335638b6b146100f657806352e831dd14610126578063715018a6146101cc575b600080fd5b6100da600480360360a08110156100ae57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060800135610254565b604080516001600160a01b039092168252519081900360200190f35b6101246004803603604081101561010c57600080fd5b506001600160a01b03813581169160200135166102de565b005b6101246004803603602081101561013c57600080fd5b81019060208101813564010000000081111561015757600080fd5b82018360208201111561016957600080fd5b8035906020019184600183028401116401000000008311171561018b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103aa945050505050565b6101246103ad565b6100da61044f565b6100da61045e565b61012461046d565b6100da600480360360a081101561020257600080fd5b506001600160a01b038135811691602081013590911690604081013590606081013590608001356104fe565b6101246004803603602081101561024457600080fd5b50356001600160a01b03166106c1565b60008061025f6107b9565b604080516020808201939093526001600160601b031960608b811b8216838501528a901b166054820152606881018890526088810187905260a88082018790528251808303909101815260c890910190915280519101206001549091506000906102d2906001600160a01b0316836107dd565b98975050505050505050565b6102e66107ff565b6000546001600160a01b03908116911614610336576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b816001600160a01b031663b43bb135826040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561038e57600080fd5b505af11580156103a2573d6000803e3d6000fd5b505050505050565b50565b6103b56107ff565b6000546001600160a01b03908116911614610405576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001546001600160a01b031681565b737A36212D8B979965d9B99A68F9709eD14cf04e38634b5e54886040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b157600080fd5b505af41580156104c5573d6000803e3d6000fd5b505050506040513d60208110156104db57600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055565b60006105086107ff565b6000546001600160a01b03908116911614610558576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b6001546001600160a01b03166105b5576040805162461bcd60e51b815260206004820152601860248201527f4552525f4e4f5f4445504c4f5945445f54454d504c4154450000000000000000604482015290519081900360640190fd5b60006105bf6107b9565b604080516020808201939093526001600160601b031960608b811b8216838501528a901b166054820152606881018890526088810187905260a88082018790528251808303909101815260c89091019091528051910120600154909150600090610632906001600160a01b031683610803565b6040805163344fe42d60e21b81526001600160a01b038b811660048301528a81166024830152604482018a9052606482018990526084820188905291519293509083169163d13f90b49160a48082019260009290919082900301818387803b15801561069d57600080fd5b505af11580156106b1573d6000803e3d6000fd5b50929a9950505050505050505050565b6106c96107ff565b6000546001600160a01b03908116911614610719576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b6001600160a01b03811661075e5760405162461bcd60e51b8152600401808060200182810382526026815260200180610aa56026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f56f3a99c8e36689645460020839ea1340cbbb2e507b7effe3f180a89db85dd8790565b60006107f8826107ec8561087b565b8051906020012061088d565b9392505050565b3390565b600060606108108461087b565b80519091508390602083018282826000f5945050506001600160a01b038316610873576040805162461bcd60e51b815260206004820152601060248201526f11549497d0d4915055114c97d190525360821b604482015290519081900360640190fd5b505092915050565b6060610887308361089a565b92915050565b60006107f8838330610a45565b6040805160008082526020808301938490526044830190815282516064840181905260609485949383926084860192918190849084905b838110156108e95781810151838201526020016108d1565b50505050905090810190601f1680156109165780820380516001836020036101000a031916815260200191505b5060408051601f1981840381018252928252602080820180516001600160e01b03166352e831dd60e01b17905281518351606382018082526082909201909516850190910190925295509093509150508015610979576020820181803883390190505b507f3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe6020820152600160601b858102602d8301527f5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be6041830152840260608201526e5af43d82803e903d91602b57fd5bf360881b6074820152915060005b815181101561087357818181518110610a0c57fe5b602001015160f81c60f81b838260630181518110610a2657fe5b60200101906001600160f81b031916908160001a9053506001016109f7565b604080516001600160f81b031960208083019190915260609390931b6001600160601b0319166021820152603581019490945260558085019390935280518085039093018352607590930190925280519101206001600160a01b03169056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205ddb26e3d7342748075c8fda6d11629538894b626ab38819890b2eb5f11a08d664736f6c634300060200334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573738be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101d45780638dd7cc90146101dc578063b570eed8146101e4578063d604a1ef146101ec578063f2fde38b1461022e57610093565b80632e53926d1461009857806335638b6b146100f657806352e831dd14610126578063715018a6146101cc575b600080fd5b6100da600480360360a08110156100ae57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060800135610254565b604080516001600160a01b039092168252519081900360200190f35b6101246004803603604081101561010c57600080fd5b506001600160a01b03813581169160200135166102de565b005b6101246004803603602081101561013c57600080fd5b81019060208101813564010000000081111561015757600080fd5b82018360208201111561016957600080fd5b8035906020019184600183028401116401000000008311171561018b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103aa945050505050565b6101246103ad565b6100da61044f565b6100da61045e565b61012461046d565b6100da600480360360a081101561020257600080fd5b506001600160a01b038135811691602081013590911690604081013590606081013590608001356104fe565b6101246004803603602081101561024457600080fd5b50356001600160a01b03166106c1565b60008061025f6107b9565b604080516020808201939093526001600160601b031960608b811b8216838501528a901b166054820152606881018890526088810187905260a88082018790528251808303909101815260c890910190915280519101206001549091506000906102d2906001600160a01b0316836107dd565b98975050505050505050565b6102e66107ff565b6000546001600160a01b03908116911614610336576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b816001600160a01b031663b43bb135826040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561038e57600080fd5b505af11580156103a2573d6000803e3d6000fd5b505050505050565b50565b6103b56107ff565b6000546001600160a01b03908116911614610405576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001546001600160a01b031681565b73__$e66ec45a77c89e1b8bb13f01de0ae8794c$__634b5e54886040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b157600080fd5b505af41580156104c5573d6000803e3d6000fd5b505050506040513d60208110156104db57600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055565b60006105086107ff565b6000546001600160a01b03908116911614610558576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b6001546001600160a01b03166105b5576040805162461bcd60e51b815260206004820152601860248201527f4552525f4e4f5f4445504c4f5945445f54454d504c4154450000000000000000604482015290519081900360640190fd5b60006105bf6107b9565b604080516020808201939093526001600160601b031960608b811b8216838501528a901b166054820152606881018890526088810187905260a88082018790528251808303909101815260c89091019091528051910120600154909150600090610632906001600160a01b031683610803565b6040805163344fe42d60e21b81526001600160a01b038b811660048301528a81166024830152604482018a9052606482018990526084820188905291519293509083169163d13f90b49160a48082019260009290919082900301818387803b15801561069d57600080fd5b505af11580156106b1573d6000803e3d6000fd5b50929a9950505050505050505050565b6106c96107ff565b6000546001600160a01b03908116911614610719576040805162461bcd60e51b81526020600482018190526024820152600080516020610acb833981519152604482015290519081900360640190fd5b6001600160a01b03811661075e5760405162461bcd60e51b8152600401808060200182810382526026815260200180610aa56026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f56f3a99c8e36689645460020839ea1340cbbb2e507b7effe3f180a89db85dd8790565b60006107f8826107ec8561087b565b8051906020012061088d565b9392505050565b3390565b600060606108108461087b565b80519091508390602083018282826000f5945050506001600160a01b038316610873576040805162461bcd60e51b815260206004820152601060248201526f11549497d0d4915055114c97d190525360821b604482015290519081900360640190fd5b505092915050565b6060610887308361089a565b92915050565b60006107f8838330610a45565b6040805160008082526020808301938490526044830190815282516064840181905260609485949383926084860192918190849084905b838110156108e95781810151838201526020016108d1565b50505050905090810190601f1680156109165780820380516001836020036101000a031916815260200191505b5060408051601f1981840381018252928252602080820180516001600160e01b03166352e831dd60e01b17905281518351606382018082526082909201909516850190910190925295509093509150508015610979576020820181803883390190505b507f3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe6020820152600160601b858102602d8301527f5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be6041830152840260608201526e5af43d82803e903d91602b57fd5bf360881b6074820152915060005b815181101561087357818181518110610a0c57fe5b602001015160f81c60f81b838260630181518110610a2657fe5b60200101906001600160f81b031916908160001a9053506001016109f7565b604080516001600160f81b031960208083019190915260609390931b6001600160601b0319166021820152603581019490945260558085019390935280518085039093018352607590930190925280519101206001600160a01b03169056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205ddb26e3d7342748075c8fda6d11629538894b626ab38819890b2eb5f11a08d664736f6c63430006020033",
  "libraries": {
    "OptionTemplateLib": "0x7A36212D8B979965d9B99A68F9709eD14cf04e38"
  },
  "devdoc": {
    "methods": {
      "calculateOptionAddress(address,address,uint256,uint256,uint256)": {
        "details": "Calculates the option token's address using the five option parameters.",
        "returns": {
          "_0": "The address of the option with the parameter arguments."
        }
      },
      "deployClone(address,address,uint256,uint256,uint256)": {
        "details": "Deploys a create2 clone of the option template contract.",
        "params": {
          "base": "The quantity of underlying tokens per unit of quote amount of strike tokens.",
          "expiry": "The unix timestamp for option expiry.",
          "quote": "The quantity of strike tokens per unit of base amount of underlying tokens.",
          "strikeToken": "The address of the strike ERC-20 token.",
          "underlyingToken": "The address of the underlying ERC-20 token."
        }
      },
      "deployOptionTemplate()": {
        "details": "Deploys the bytecode for the Option contract."
      },
      "initRedeemToken(address,address)": {
        "details": "Only the factory can call the initRedeemToken function to set the redeem token address. This function is only callable by the Registry contract (the owner)."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33,
        "contract": "contracts/option/applications/factories/OptionFactory.sol:OptionFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1941,
        "contract": "contracts/option/applications/factories/OptionFactory.sol:OptionFactory",
        "label": "optionTemplate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}